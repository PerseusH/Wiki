数据(**mysql**, redis, mongodb)，服务(**linux**, nginx, microservice, docker, restful-api)，网络(**tcp**, http, https, security)

-> 写程序时永远不要把性能作为第一优先级，因为你并不想（在写程序时）一直猜测性能。写正确的代码才是你第一优先级。这意味着，我们首先要关注的是'完整性、可读性和简单性'。一旦有了可以运行的程序，才需要确定程序是否足够快。假如程序不够快，那么使用语言提供的工具来查找和解决性能问题
-> '谱系'即综合背景，是'知识学习的关键'。谱系包括宏观谱系和微观谱系。谱系是剖面的实在
    1.算法谱系
    2.工具谱系

|PV(page view) -> 浏览量,用户每打开一个页面就被记录1次.用户多次打开同一页面,浏览量值累计
|UV(user view) -> 访客量,一天之内的独立访客数(以Cookie为依据).一天内同一访客多次访问只算1次
|日活 -> 每日活跃用户数

### 灰度发布

- 灰度发布（又名金丝雀发布）是指在黑与白之间，能够平滑过渡的一种发布方式。在其上可以进行A/B testing，即让一部分用户继续用产品特性A，一部分用户开始用产品特性B，如果用户对B没有什么反对意见，那么逐步扩大范围，把所有用户都迁移到B上面来。灰度发布可以保证整体系统的稳定，在初始灰度的时候就可以发现、调整问题，以保证其影响度
- 灰度发布开始到结束期间的这一段时间，称为灰度期
- 作用：及早获得用户的意见反馈，完善产品功能，提升产品质量 让用户参与产品测试，加强与用户互动 降低产品升级所影响的用户范围
- 有时候我不希望让所有的流量都一次性的到达程序的新版本，因为那个新版本也许并没有测试地很充分。灰度发布允许你直接只导入指定量的流量到新的版本，API 网关就可以帮你来做这件事情。你可以配置10%的请求到新的版本，然后一旦你确保了新版本没有bug，你可以把流量切换到100%

\性能(针对高并发)
    1.python
        requests
        flask
        gevent
        多进程
        多线程
        协程
        |设计模式 -> 单例, 消息队列, 装饰器
    2.nginx
        |幂等性(Idempotence) -> 操作一次和操作多次的副作用一样(防止某长时间操作等待过程中, 用户多次刷新页面提交重试). 数据库中用唯一键阻挡重试是比较安全的方式
        epoll&select
        static_cache
        load_balance
        reverse_proxy
        MQ中间件
    3.http
        RestFull-API
        |网络攻击 -> DDos防护
        DNS轮询
        |TCP
            |三次握手 -> 建立连接
            |四次挥手 -> 关闭连接
            |TIME_WAIT -> 主动关闭方发送完最终ACK后的状态
            |CLOSE_WAIT -> 被动关闭方收到FIN并发送ACK后的状态
            |Socket = Ip address + TCP/UDP + port
            |返回值 -> -n->出错; 0->到达文件结尾,连接关闭; n->发送|接收到的数据大小

            |数据操作
                write -> 发送口
                read -> 接收口
                send -> 发送口
                recv -> 接收口
        UDP
        http
        https
    4.redis
        data-type
        memory_cache
        epoll
        cluster
        connection_pool
        pub-sub
    5.mysql
        |index
            聚集索引数据结构
        no_join
        no_table_scan
        分表&分库
        cluster
        |lock
            悲观锁
            乐观锁
        |B-Tree/B+Tree
            插入
            查找
            删除
    6.前端
        |异步请求 -> Node
        |CDN -> 幂等请求, 资源静态化

\Stack
	|**Deployment
	-> Release(Fabric, Ansible)
	-> Pack(Setup, Wheel, Pip, Makefile, VirtualEnv)
	-> Test(UnitTest, DocTest, PyTest)
	-> Build(Travis-CI, Jenkins, Docker)

	|**Coding
	-> Debug(iPython, PDB/iPDB)
	-> Tools(Linux&Vim&SSH, Git, Atom)
	-> DataStructure(String, Array, Queue, Stack, Tree, list, Hash)
	
	FrontEnd(RESTful,DOM&H5,JS&ES6,CSS&LESS&SASS,React&Redux&Webpack&Node&Gulp)
	Network(ProcessMsg,Socket,MultipleThread,Coroutine,Gevent,Asyncio,RabbitMQ)
	
	|**Data
	-> Storage(BigData, Mysql, Redis, MongoDB)
		-> 使用pymongo，并用Mongoengine重构文件托管服务的模型
		-> MongoDB索引、高可用和分片的经验
	
	Python(Flask, Celery, Django, Tornado, Mako)
	WebServer(Nginx, Gunicorn, UWsgi)

|Must do -> 用户注册登录模块 -> XSS攻防 -> 网络编程 -> MQ中间件 -> Celery

|mysql
    |执行计划
    |查看语句IO和CPU使用情况
    |show profile
    |为什么语句没有使用索引
    |实体类型（用户自定义字段）
    |字段搜索

|python
    |dict原理和哈希冲突解决
    |ordereddict自定义
    |用C实现python-list

    |第三方C语言包内存泄漏
    |进程卡死怎么定位
    
    |flask g变量
    |flask 路由
    |WSGI的组成部分

|challenge
    |C扩展
    |幂等接口
    |加密
    |web安全
    |中间件+设计模式
