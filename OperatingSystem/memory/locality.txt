## 局部性原理

- 万事万物都是局部性的产物，都是宇宙中**局部熵低**导致的，如果宇宙中处处熵一致，则只有混沌
- 局部性的**本质**是**概率的不均等**，宇宙中很多东西都不是平均分布的，平均分布是概率论中几何分布的一种特殊形式，非常简单，但世界没这么简单。更常出现的概率分布是**高斯分布(正态分布，钟形曲线)**，这是**正常状态下的概率分布**
- **理性过程**必然符合局部性(意义边界)
- 局部性原理**产生的原因**是：**空间是连续的**
- **只要概率不均等就一定存在局部性**

1. `空间局部性`当前被访问的存储地址临近的地址近期很可能被访问
   - 除跳转指令外,大部分程序指令都是**顺序**执行的(包括数组的顺序访问)
2. `时间局部性`当前被访问的数据近期很可能被**重复**访问.**产生原因: 循环,堆栈等**，是**空间局部性的特例**(访问地址一致)
3. `分支局部性`顺序局部性。计算机中大部分指令是顺序执行，顺序执行和非顺序执行的比例大致是5:1，即便有if这种选择分支，其实大多数情况下某个分支都是被**大概率选中**的，于是就有了**CPU的分支预测优化**

## LRU算法

- 利用时间戳选出上次使用时间最远的内存页进行调度交换.'系统开销巨大'
- `移位寄存器`记录某进程中各内存页的使用情况，每个内存页都会配置一个
- `栈`利用一个特殊的栈来保存当前使用的各个页面的页面号。每当进程访问某页面时，便将该页面的页面号从栈中移出，将它压入栈顶(重复访问不会新增页面)。因此栈顶始终是最新被访问页面的编号，而栈底则是最近最久未使用页面的页面

#### 	替代方案

1. 最不经常使用页面置换算法
2. 最近没有使用页面置换算法
3. 最优页面置换算法 -> 难以实现. 仅用于评估其他算法

## 应用场景

1. 知识分子的孤独
2. CPU多级缓存
3. CPU分支预测优化
4. 内存数据库Redis，MemCached（热点数据常驻内存）
5. 资源分发网络CDN
6. 段页式内存管理，连续内存访问
7. JIT动态语言即时编译器
8. CopyOnWrite写时复制，最早应该是源自linux系统，linux中在调用fork() 生成子进程时，子进程应该拥有和父进程一样的指令和数据，可能子进程会修改一些数据，为了避免污染父进程的数据，所以要给子进程单独拷贝一份。出于效率考虑，fork时并不会直接复制，而是等到子进程的各段数据需要写入才会复制一份给子进程，故此得名 写时复制。在计算机的世界里，读写的分布也是有很大的局部性的，大多数情况下**读远大于写**， 写时复制 的方式，可以减少大量不必要的复制，提升性能
9. mysql磁盘碎片整理,使索引可物理连续存储
10. 82法则，在很多行业、很多领域都可以套用，*80%的xxx来源于20%的xxx* ，80%的工作收益来源于20%的工作任务，局部性给我们的启示“永远关注最重要的20%”，**优先做高收益率的事情**
11. 大数据运算时，时常会遇到**数据倾斜、数据热点**的问题，这就是数据分布的局部性导致的，数据倾斜往往会导致我们的数据计算任务耗时非常长，数据热点会导致**某些单节点成为整个集群的性能瓶颈，但大部分节点却很闲**，这些都是我们需要极力避免的。
    - 一般我们解决热点和数据切斜的方式都是提供过**重新hash打乱整个数据让数据达到均匀分布**，当然有些业务逻辑可能不会让你随意打乱数据，这时候就得具体问题具体分析了。比如HDFS中小文件单节点读的热点，可以通过减少加副本缓解。其本质上没有避免局部性，只增加资源缓解热点了，微博Redis集群也是采取这种加资源的方式