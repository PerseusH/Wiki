\SkillStack
	Release(Fabric)
	Build(Travis-CI, Jenkins, Docker)
	UnitTest(pytest)
	Coding(Linux&Vim&SSH, Git, Atom)
	Algrithm(String, Array, Tree, list, Hash)
	FrontEnd(DOM&H5, JS&ES6, CSS&CSS3&LESS&SASS, React&Redux&Webpack&Node&Gulp)
	Data(BigData, Mysql, Redis)
	Python(Pip, VirtualEnv, Flask, Django, Tornado, Mako)
	WebServer(Nginx, Gunicorn)

\WorkFlow
	algorithm -> major -> python

\vim
    ~/.vimrc #配置文件
    F2 -> i -> ctl+v #外部文本完美粘贴
    shift+a #就是A,可直接到行尾添加内容

    |多行注释
        1.进入命令行模式, 按ctrl+v进入 visual block模式, 然后按j, 或者k选中多行, 把需要注释的行标记起来
        2.按大写字母I, 再插入注释符, 例如#
        3.按esc键就会全部注释了

    |取消多行注释
        1.进入命令行模式, 按ctrl+v进入 visual block模式, 按字母l横向选中列的个数, 例如#需要选中2列
        2.按字母j, 或者k选中注释符号
        3.按d键就可全部取消注释

    -> :wq #保存并退出
    -> ZZ #保存并退出
    -> :q #如果是最后一个被关闭的窗口, 那么将退出vim
    -> :q! #强制退出并忽略所有更改
    -> :e! #放弃所有修改, 并打开原来文件

\Mac CMD
    Finder->Go: /etc/hosts #hosts
    Atom -> opt+cmd+i #es6 console
	desktop -> cmd+k #远程连接

	|Terminal
	    1.将光标移动到行首 -> ctrl + a
	    2.将光标移动到行尾 -> ctrl + e
	    3.清除屏幕 ->        ctrl + l
	    4.搜索以前使用命令 -> ctrl + r
	    5.清除当前行 ->      ctrl + u
	    6.清除至当前行尾 ->   ctrl + k
	    7.单词为单位移动 ->   option + 方向键

\shell脚本
    参数: 命令行输入, 以空格分割
    $0  ->  ./test.sh,即命令本身, 相当于c/c++中的argv[0]
    $1  ->  -f,第一个参数.
    $2  ->  config.conf
    $3, $4 ...  -> 类推。
    $# 参数的个数, 不包括命令本身, 上例中$#为4.
    $@  -> 参数本身的列表, 也不包括命令本身, 如上例为 -f config.conf -v --prefix=/home
    $*  -> 和$@相同, 但"$*" 和 "$@"(加引号)并不同, "$*"将所有的参数解释成一个字符串, 而"$@"是一个参数数组。

\Windows & PowerShell
	> '"Hello,Powershell Script"' > MyScript.ps1 #创建脚本
	> .\MyScript.ps1 #执行脚本
	install: cinst <package>
	taskkill /F /IM python.exe #批量删除进程
	Alt+F4: 关闭当前所有窗口

\linux
	-> gdb调试程序
	-> nice命令
	-> 性能监控命令uptime
	-> 平均负载
	-> bt指令查看core文件中的堆栈信息
	-> 系统平均负载被定义为在特定时间间隔内运行队列中的平均进程数.
	-> 如果一个进程满足以下条件则其就会位于运行队列中:
		-> 它没有在等待I/O操作的结果
		-> 它没有主动进入等待状态(也就是没有调用'wait')
		-> 没有被停止(例如:等待终止)
	-> 一般来说,每个CPU内核当前活动进程数不大于3,则系统运行表现良好！当然这里说的是每个cpu内核,也就是如果你的主机是四核cpu的话,那么只要uptime最后输出的一串字符数值小于12即表示系统负载不是很严重
	-> 当然如果达到20,那就表示当前系统负载非常严重,估计打开执行web脚本非常缓慢

\Future
	-> 遗传算法
	-> 最大熵模型应用:词性标注、短语识别、指代消解、语法分析、机器翻译、文本分类、问题回答、语言模型
	-> 类型论(Type Theory)
