|compile
	gcc hello.c -o hl #C -o指定输出可执行文件名,没有指定则默认输出到a.out -c为编译到目标文件但不链接
	g hello.cpp -o hl | g++ hello.cpp -o hl #C++

	gcc 是GNU Compiler Collection，原名为Gun C语言编译器，因为它原本只能处理C语言，但gcc很快地扩展，包含很多编译器（C、C++、Objective-C、Ada、Fortran、 Java），可以说gcc是GNU编译器集合
	g++ 是C++编译器
	cc 是 Unix系统的 C Compiler，一个是古老的 C 编译器。而 Linux 下 'cc 一般是一个符号连接，指向 gcc'；可以通过 $ ls -l /usr/bin/cc 来简单察看，该变量是 make 程序的内建变量，默认指向 gcc 。 cc 符号链接和变量存在的意义在于源码的移植性，可以方便的用 gcc 来编译老的用cc编译的Unix软件，甚至连 makefile 都不用改在，而且也便于 Linux 程序在 Unix下 编译。
	CC 则一般是 makefile 里面的一个名字标签，即宏定义，表示采用的是什么编译器（如：CC = gcc

|link
	ld test.o  -macosx_version_min 10.13 -lc -o test_e #mac
	ld -o test_e test.o #linux

	|动态连接库
		-> 程序编制一般需经编辑、编译、连接、加载和运行几个步骤。由于一些公用代码需要反
		复使用，就把它们预先编译成目标文件并保存在"库"中。当它与用户程序的目标文件连
		接时，连接器得从库中选取用户程序需要的代码，然后复制到生成的可执行文件中。这
		种库称为静态库，其特点是"可执行文件中包含了库代码的一份完整拷贝"。显然，当静态
		库被多个程序使用时，磁盘上、内存中都是多份冗余拷贝。
		-> 动态连接库就克服了这个缺陷。当它与用户程序的目标文件连接时，连接器只是
		作上标记，说明程序需要该动态连接库，而不真的把库代码复制到可执行文件中；仅当
		可执行文件运行时，加载器根据这个标记，检查该库是否已经被其它可执行文件加载进
		内存。如果已存在于内存中，不用再从磁盘上加载，只要"共享内存中已有的代码"即可。
		这样磁盘、内存中始终只有一份代码，较静态库为优

|execute
	./test_e

|指针 -> 变量内存地址
	int *p = &a;
	p <=> &a <=> &*p, *p <=> a, **p <=> *&a <=> a的值

	printf("Address: %p", p); //打印内存地址

-> C++中没有现成的获取数组元素个数的方法，只有自己写
	int count = sizeof(array) / sizeof(array[0]);
	int count = sizeof(array) / sizeof(int);
