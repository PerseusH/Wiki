|Memory
    -> 所有对象和数据结构都在一个私有heap中,程序员没有访问该heap的权限,只有解释器才能进行操作
    -> 内存管理模块为Python的heap空间分配内存.其核心API提供一些访问该模块的方法供程序员使用
    垃圾回收 -> 1.引用计数 2.标记清除 3.分代回收

    -> 包含内置名称的命名空间是在python解释器启动的时候创建的,并且不会被删除.一个模块的全局命名空间是在模块定义代码被读入的时候创建的,一般情况下,模块命名空间会持续到解释器结束
    -> 传递参数的时候,python不允许程序员选择采用传值还是传引用.Python传参用的是传对象引用
    -> if/elif/else、try/except/finally、for/while不能更改变量作用域,
    也就是说这些代码块中的变量,在外部也是可以访问的
    -> 能改变变量作用域的代码段是'{def、class、lambda}'

|序列化(Serialization)(或持久化)
    -> 在程序运行的过程中,所有的变量都是在内存中,一旦程序结束,变量所占用的内存就被操作系统全部回收.我们把变量'{从内存中变成可存储或传输}'的过程称之为序列化,在Python中叫pickling,在其他语言中也被称之为serialization,marshalling,flattening等.可以把序列化后的内容写入磁盘,或远程传输到别的机器上
    -> 可将一个对象从一个进程传递给另一个;方便保存及读取

-> Flask&Celery&RabbitMQ&MongoDB&Asyncio&RESTful API
-> 网络爬虫(requests+beautifulsoup->简单, scrapy+xpath->复杂)
-> 搜索引擎Solr搭建

-> DataStructure(String, Array, Queue, Stack, Tree, List, Hash)
-> Network(ProcessMsg,Socket,MultipleThread,Coroutine,Gevent,Asyncio,RabbitMQ)

1.看过的书 -> python参考手册, mysql技术内幕
2.标准库线程安全的队列是哪一个？不安全的是哪一个？logging是线程安全的吗？
    线程安全 -> 多线程同时操作时不会发生写冲突
    非线程安全 -> 多线程同时操作时会发生写冲突
    -> Queue模块提供一个适用于多线程编程的先进先出(first-in,first-out,FIFO)数据结构,可以用来在生产者消费者'{线程之间安全}'地传递消息或其他数据.它会为调用者'{处理锁定}',使用多线程可以安全地处理同一个Queue实例
    -> list,set,dict是'{非线程安全}'的
    -> logging是'{线程安全}'的,handler内部使用了threading.RLock()来保证同一时间只有一个线程能够输出

3.python适合的场景有哪些？当遇到计算密集型任务怎么办？
    -> 运维,爬虫,数据分析,web
    -> 遇到'{计算密集型}'任务使用'{多进程multiprocessing}',利用多核

4.python高并发解决方案？
    '{python2.x}' -> twisted+tornado+gevent, socket消息队列轮询
    '{python3.x}' -> asyncio
