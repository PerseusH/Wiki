|PyChecker -> 静态分析工具,它报告源代码中的错误并且会报告错误类型和复杂度
|Pylint -> 检验模块代码是否达到标准的工具

\iPython, PDB/iPDB, PUDB
    > import [pdb/ipdb]; [pdb/ipdb].set_trace() #设置断点
    $ ipython test.py --pdb #以调试模式运行程序,发现异常或断点则进入pdb控制台进行调试
    $ python -m [pdb/ipdb] test.py #以调试模式运行程序,直接进入pdb控制台

\MemoryLeak
    -> 内存泄漏是由于一个'{长期持有的对象}'不断的往一个dict或者list对象里添加新的对象, 而又没有即时释放，就会导致这些对象'{占用的内存越来越多}'，从而造成内存泄漏。另外，对象的'{交叉引用}'也会造成内存无法释放的问题
    -> 进程占用内存一直升高，与逻辑预期不一致，就可能发生了Memory Leak
    -> python有GC机制,出现内存泄露的场景一般是扩展库内存泄露,循环引用或全局容器里的对象没有释放
    -> 属于SegmentFault(段错误)
    -> python中同时满足以下条件的对象无法被回收(UncollectableObject),这种对象会持续占据内存
        1.循环引用
        2.循环引用链上某对象定义了__del__方法
            -> 官方解释是：循环引用的一组对象被gc模块识别为可回收，但需先调用每个对象上的__del__才可被回收。当用户自定义了__del__的对象，gc系统无法判断应先调用环上的哪个__del__，因此无法回收这类对象

    |Graphviz -> 将图结构转化成png图片表示的工具.通过对象的引用关系，找到内存泄漏的对象

    |GC -> 添加检查点
        >>> import gc, sys
        >>> gc.collect() #find out uncollectable object and put them in gc.garbage
        >>> gc.garbage #print all uncollectable objects
        >>> gc.get_objects() #可以取得当前所有不能回收的对象(引用计数不为0)的列表
        >>> sys.getrefcount(var) #获取变量的引用计数

    |memory_profiler -> 逐行测算内存使用, 统计内存使用情况
        > from memory_profiler import profile
        > @profile
        > def func():
        > ...

        $ python -m memory_profiler xxx.py

        Line #    Mem usage    Increment   Line Contents
        ================================================
            12   28.570 MiB    0.000 MiB   @profile
            13                             def func():
            14   28.570 MiB    0.000 MiB       obj = []
            15  106.203 MiB   77.633 MiB       for i in range(10000):
            16  106.203 MiB    0.000 MiB           obj = get_current_obj(obj)
            17  106.203 MiB    0.000 MiB           if(i%100==0):
            18  105.445 MiB   -0.758 MiB               print(memory_usage_psutil())

    |Objgragh -> 通常为了查找出哪些对象有内存泄漏，一般每隔一段时间调用一次show_growth,然后找出对象的个数一直在增长的对象，这些对象即为发生了内存泄漏的对象. 可用graphviz可视化结果
        > import objgraph
        > objgraph.show_most_common_types(n) #获取前n大内存对象,用于查找ML和大内存对象
        > objgraph.show_growth() #输出增长的对象. 首次调用打印出来的是当前所有对象的总数
        > objgraph.by_type(_type) #objgraph.by_type('list')返回所有list对象
        > d = objgraph.by_type('Dict')[-1]
        > chain = objgraph.find_backref_chain(d, inspect.ismodule) #查找对象的引用树
        > objgraph.show_chain(chain, filename='chain.png') #生成png格式的对象引用关系
        > objgraph.show_refs(chain, filename='chain.png') #生成chain引用关系图

        |实例
            import os, gc, objgraph
            gc.collect() #进行一次垃圾对象的回收
            print'====================================='
            objgraph.show_growth()
            a = []
            print'====================================='
            objgraph.show_growth()
            a.append([1,2,3])
            print'====================================='
            objgraph.show_growth()
            b = ['a','b','c']
            del b
            print'===================================='
            objgraph.show_growth()

        -> 但是用这些函数还是不能定位到具体的是那些代码里产生泄漏的，特别是dict和list这两个对象被许多模块，包括python解释器本身大量的使用
        -> 为了将自己用的dict和list与其它模块的dict和list区分开,我们'{自定义dict和list类}'
        -> 范围又可以进一步的缩小了，离目标又近了一步，但是还是有一段距离

        |程序最后执行
            d = objgraph.by_type('Dict')[-1]
            chain = objgraph.find_backref_chain(d, inspect.ismodule)
            objgraph.show_chain(chain, filename='chain.png')
            or
            $ pyrasite-shell <pid>
            > import objgraph; objgraph.show_refs(chain, filename='chain.png')

    |$ (gdb) bt #获取程序的调用栈、调用参数以及所在行的代码. py-bt只查找python程序

    |pyrasite -> 直接连上一个正在运行的python程序，打开一个类似ipython的交互终端来运行命令、检查程序状态
        -> 连接到有问题的python程序，开始收集信息
            $ pyrasite-shell <pid>
        -> 接下来就可以在<pid>进程里调用任意python代码，查看进程状态

    |psutil -> 查看python进程状态
        $ pyrasite-shell <pid> #首先attach到目标进程, 查看python进程占用的系统内存RSS
        >>> import psutil, os
        >>> psutil.Process(os.getpid()).memory_info().rss 29095232
            rss -> the real memory (resident set) size of the process (in 1024 byte units) #基本与ps命令显示结果一致
        >>> psutil.Process(os.getpid()).memory_info()[0] / float(2 ** 20)

    |guppy -> 获取各种对象的内存使用情况.如果python进程中有未释放的对象，造成内存占用升高，可通过guppy查看
        $ pyrasite-shell <pid> #attach到目标进程
        from guppy import hpy
        h = hpy()
        h.heap()
        # Partition of a set of 48477 objects. Total size = 3265516 bytes.
        # Index Count % Size % Cumulative % Kind (class / dict of class)
        # 0 25773 53 1612820 49 1612820 49 str
        # 1 11699 24 483960 15 2096780 64 tuple
        # 2 174 0 241584 7 2338364 72 dict of module
        # 3 3478 7 222592 7 2560956 78 types.CodeType
        # 4 3296 7 184576 6 2745532 84 function
        # 5 401 1 175112 5 2920644 89 dict of class
        # 6 108 0 81888 3 3002532 92 dict (no owner)
        # 7 114 0 79632 2 3082164 94 dict of type
        # 8 117 0 51336 2 3133500 96 type
        # 9 667 1 24012 1 3157512 97 __builtin__.wrapper_deor
        # <76 more rows. Type e.g. '_.more' to view.>

        h.iso(1,[],{})
        # Partition of a set of 3 objects. Total size = 176 bytes.
        # Index Count % Size % Cumulative % Kind (class / dict of class)
        # 0 1 33 136 77 136 77 dict (no owner)
        # 1 1 33 28 16 164 93 list
        # 2 1 33 12 7 176 100 int

        -> 通过以上步骤可排除python进程中存在未释放的对象的可能

    -> 若以上工具都不能找到不能回收的对象，可推测libc的malloc实现问题。使用tcmalloc替代libc默认的malloc

    |使用Valgrind对整个应用程序的运行过程进行分析
        $ valgrind -v --leak-check=yes --num-callers=256 --logfile=d python xxx.py
        -> --show-reachable=yes 会把还在使用的内存情况也打印出来

\死锁
    $ (gdb) info threads #查看线程. 一般加锁、死锁情况存在时，会有线程卡在xx_wait等函数上
        Id Target Id Frame
        206 Thread 0x7febdbfe3700 (LWP 124916) "python2"0x00007febe9b75413in select () at ../sysdeps/unix/syscall-template.S:81
        205 Thread 0x7febdb7e2700 (LWP 124917)"python2"0x00007febe9b75413 in select () at ../sysdeps/unix/syscall-template.S:81
        204 Thread 0x7febdafe1700 (LWP 124918) "python2"0x00007febe9b75413 in select() at ../sysdeps/unix/syscall-template.S:81
        203 Thread 0x7febda7e0700 (LWP 124919) "python2" 0x00007febe9b7369d in poll () at ../sysdeps/unix/syscall-template.S:81

\logging
    -> 级别高低: CRITICAL>ERROR>WARNING>INFO>DEBUG>NOTSET, level以下的logging不会执行

        > import logging
        > #name为系统当前用户名
        > logging.basicConfig(level=logging.INFO, format='%(asctime)s %(filename)s: %(lineno)s %(name)s %(levelname)s %(message)s', datefmt='%Y-%m-%d %H:%M:%S')
        > logging.debug('This message should appear on the console')
        > logging.info('So should this')
        > logging.warning('And this, too')
