\os
    os.environ.get('PYTHONPATH') | os.getenv('PYTHONPATH') #获取环境变量
    os.remove(filename) #删除文件
    os.rename(filename, new) #重命名文件
    os.path.getctime(f) #文件创建时间(秒)
    os.path.getmtime(f) #文件最后修改时间(秒)
    os.listdir(dir) #目录中所有文件名(包括子目录名)组成的列表
    os.getcwd() #获得当前工作目录
    os.chdir(dir) #改变当前工作目录
    os.pardir #父级工作目录(..)
    os.path.abspath('' | '.' | '..' | filename) #获取绝对路径 ''|'.'当前目录
    os.path.dirname(os.path.abspath(...)) #获取绝对路径父级目录
    os.makedirs(dir) #创建目录层
    os.removedirs(dir) #删除目录层
    -> os.removedirs(dir)函数会删除所给路径中最后一个目录下所有的空目录.而os.mkdir(dir)和os.rmdir(dir)函数只能处理单个目录级
    os.stat(file) #获取文件信息
    os.system(cmd) | os.exec(cmd) #执行shell命令
    os.fork() #复制进程
    os.wait() #等待一个进程执行结束
    -> 在Unix环境下,你可以通过组合使用os.exec(cmd),os.fork()以及os.wait()来从当前程序调用另一个程序
    os._exit() #调用C语言的_exit()函数,直接退出Python程序,其后的代码也不会继续执行.用于在fork出来的子进程中退出

\sys
    -> 提供了许多函数和变量来处理Python运行时环境的不同部分
    sys.argv #命令行参数列表,sys.argv[0]是文件名,即python后第一个字符串
    sys.path #由目录名构成的列表,Python从中查找扩展模块(Python源模块,编译模块,或者二进制扩展).启动Python时,这个列表从根据内建规则,PYTHONPATH环境变量的内容,以及注册表( Windows系统)等进行初始化
    sys.builtin_module_names #包含Python解释器中所有内建模块名称的列表
    sys.modules #包含所有加载模块的字典
    sys.getrefcount(variable) #返回给定对象的引用记数,即这个对象使用次数.注意这个值总是比实际的数量大, 因为该函数本身在确定这个值的时候依赖这个对象
    sys.platform #获得当前系统平台
    sys.getsizeof(arg) #获取变量所占内存大小
    sys.setprofiler(profiler) #函数允许你配置一个分析函数(profiling function).这个函数会在每次调用某个函数或方法时被调用(明确或隐含的),或是遇到异常的时候被调用
    sys.setdefaultencoding('utf-8') #设置默认编码
    sys.settrace(tracer) 函数与setprofiler类似,但是trace函数会在解释器每执行到新的一行时被调用
    sys.stdout.write('hello'+'\n') = print('hello')
    hi=raw_input('hello? ') = print('hello? '); hi=sys.stdin.readline()[:-1]
    sys.exit(0) #引发一个SystemExit异常,退出程序(解释器).0为正常退出,其他数值(1-127)为不正常,可抛异常事件供捕获.用于在主线程中退出
    -> __builtin__.exit是一个Quitter对象,这个对象的__call__ 方法会抛出一个SystemExit异常
    sys.exitfunc = exitfunc #在sys.exit执行前调用exitfunc函数

|errno -> 定义了许多的符号错误码, 比如ENOENT("没有该目录入口")以及 EPERM("权限被拒绝").它还提供了一个映射到对应平台数字错误代码的字典.在大多情况下,IOError异常会提供一个二元元组, 包含对应数值错误代码和一个说明字符串. 如果你需要区分不同的错误代码, 那么最好在可能的地方使用符号名称

\Time
    > import time
    > secs = time.time() #返回当前时间的时间戳(1970纪元后经过的浮点秒数)
    > t=time.ctime(secs) -> 'Sat Jan 27 19:09:51 2018' #fmt: %a %b %d %H:%M:%S %Y
    > #time.ctime() -> 当前日期加时间字符串
    > tm = time.strptime(t, "%a %b %d %H:%M:%S %Y") -> <type 'time.struct_time'>
    > str_tm = time.strftime("%Y-%m-%d %H:%M:%S", tm) -> '2018-01-27 19:09:51'

    > import datetime
    > dt = datetime.datetime.strptime('2017-10-13 10:10:10', '%Y-%m-%d %H:%M:%S')
    > now = datetime.datetime.now() #当前日期加时间 <class 'datetime.datetime'> obj
    > now.strftime('%Y-%m-%d %H:%M:%S') -> '2017-10-13 10:10:10'
    > now.isoformat() -> '2018-03-23T07:18:08.954842'

\re -> 正则查找模块
    > import re
    > s = str_sample
    > reg = re.compile(r'\s\S') #编译要查找的正则对象
    > #reg.xxx(s) == re.xxx(pattern, s)
    > reg.findall(s) #返回所有匹配字符串数组, 加len()可获取符合的结果个数(重复查找)
    > reg.findall(r'(?=word)', s) #返回匹配word结果个数的空字符串数组
    > reg.finditer(s) #返回所有匹配字符串结果迭代器
        # 遍历迭代器
        # itr = reg.finditer(s)
        # for item in itr:
        #     print item.group()
    > reg.match(s) #从头开始匹配,起始处不匹配则返回None. reg.match(s).group() 获取结果
    > reg.search(s) #在整个样本中匹配,返回第一个结果. reg.search(s).group() 获取结果
    > reg.split(s) #根据pattern将样本分割成字符串数组
    > reg.sub(repl, s, [count]) #字符串替换,保旧返新. count为替换个数,默认为0全部替换
    > reg.subn(repl, s, [count]) #同上. 返回一个元组(new_str, replace_number)

    |flags
        -> re.xxx(pattern, s, flags=re._x)
        re.I | re.M #指定多个标志
        re.I(IGNORECASE) -> 使匹配对大小写不敏感
        re.L(LOCALE) -> 做本地化识别（locale-aware）匹配
        re.M(MULTILINE) -> 多行匹配，影响 ^ 和 $
        re.S(DOTALL) -> 使 . 匹配包括换行在内的所有字符
        re.U(UNICODE) -> 根据Unicode字符集解析字符。这个标志影响 \w, \W, \b, \B.
        re.X(VERBOSE) -> 该标志通过给予你更灵活的格式以便你将正则表达式写得更易于理解。

|http
    |urllib/urllib2/httplib

    |requests
        #下载图片
        pic = requests.get('https://xxx.jpg').content
        with open('local.jpg', 'wb') as f:
            f.write(pic)

    |scrapy

    |BeautifulSoup

\logging
    > import logging
    > logging.basicConfig(level = logging.INFO)
    > logging.info('xxx xxx') #调试程序, 记录信息

\uuid(全局唯一标识符)
    import uuid

    uuid.uuid1()　　基于MAC地址，时间戳，随机数来生成唯一的uuid，可以保证全球范围内的唯一性。
    uuid.uuid2()　　算法与uuid1相同，不同的是把时间戳的前4位置换为POSIX的UID。不过需要注意的是python中没有基于DCE的算法，所以python的uuid模块中没有uuid2这个方法。
    uuid.uuid3(namespace,name)　　通过计算一个命名空间和名字的md5散列值来给出一个uuid，所以可以保证命名空间中的不同名字具有不同的uuid，但是相同的名字就是相同的uuid了。【感谢评论区大佬指出】namespace并不是一个自己手动指定的字符串或其他量，而是在uuid模块中本身给出的一些值。比如uuid.NAMESPACE_DNS，uuid.NAMESPACE_OID，uuid.NAMESPACE_OID这些值。这些值本身也是UUID对象，根据一定的规则计算得出。
    uuid.uuid4()　　通过伪随机数得到uuid，是有一定概率重复的

uuid.uuid5(namespace,name)　　和uuid3基本相同，只不过采用的散列算法是sha1

\shutil
    shutil.rmtree(dir_path) #递归删除非空目录内容
    shutil.make_archive('archive_xxx', 'bztar') #打包为archive_xxx.tar.bz2

\json/simplejson -> simplejson的api和json相同
    -> simplejson如果'{没有C扩展加速}',效率极其低下;使用C加速的情况下速度比json快很多(10x)
        -> 1K的数据，2.9GHz的CPU，单核下每秒能dump 37000次
        -> simplejson(未加速)同等条件下只有 1400次

    > import json
    > json_obj = json.loads('{"key2": "val2", "key1": "val123", "key0": "val0"}')
    > json_str = json.dumps(json_obj)

    > print json_obj -> {"key2": "val2", "key1": "val123", "key0": "val0"}

    > print json.dumps(json_obj, indent=4) #格式化打印json, 缩进为4空格
    >>> {
    >>>     "key2": "val2",
    >>>     "key1": "val123",
    >>>     "key0": "val0"
    >>> }

    > import simplejson; print bool(getattr(simplejson, '_speedups', False)) #打印 True 说明已开启 C 加速(默认开启)

|cgi -> cgi.escape('<script>') #html转义

\subprocess
    -> 系统命令执行、执行结果获取和解析.其中最有用的是call（执行系统命令）、check_call（执行结果不为0则抛出异常）、check_output（最方便的获取执行的输出的函数）、Popen+PIPE（支持管道的多命令执行）

    |Popen
    > pipe = Popen(cmd, shell=True, bufsize=1024, stdout=PIPE).stdout
    > result = pipe.read()

|argparse -> 用来替代optparse的命令行解析库.如果你考虑用更直观的,推荐docopt,它使用docstring所见即所得实现命令行解析

|glob -> 文件名的shell模式匹配,你不用遍历整个目录判断每个文件是不是符合,使用glob一句话就解决

    > import glob
    > #获取指定目录下的所有图片list
    > print glob.glob(r"E:/Picture/*/*.jpg")
    > #获取上级目录的所有.py文件
    > print glob.glob(r'../*.py') #相对路径
    > f = glob.iglob(r'../*.py') #返回一个generator

\contextlib
    > #通过yield，将f_obj传递出去，最终主调函数可以使用它。一旦with语句结束，控制就会返回给file_open函数，它继续执行yield语句后面的代码。这个最终会执行finally语句--关闭文件。如果我们在打开文件时遇到了OSError错误，它就会被捕获，最终finally语句依然会关闭文件句柄
    > from contextlib import contextmanager

    > @contextmanager
    > def file_open(path):
    >     try:
    >         f_obj = open(path,"w")
    >         yield f_obj
    >     except OSError:
    >         print("We had an error!")
    >     finally:
    >         print("Closing file")
    >         f_obj.close()

    > if __name__ == "__main__":
    >     with file_open("test/test.txt") as fobj:
    >         fobj.write("Testing context managers")

\multiprocessing
    -> 基于multi process实现了类multi thread的API接口，并且用pickle部分地实现了变量共享, 使用多进程实现了concurrency
        > from multiprocessing import Pool

    -> multiprocessing.Pool和gevent有冲突不能同时使用
    -> 用multiprocessing.queues中的Queue、SimpleQueue、JoinableQueue这三个队列实现数据共享

\multiprocessing.dummy
    -> 基于multithread实现了multiprocessing的API, 使用多线程实现concurrency???
        > from multiprocessing.dummy import Pool

\threading -> 多线程模块
    threading模块对象     描述
    Thread               表示一个线程的执行对象
    Lock                 锁原语对象（跟thread模块里的锁对象相同）
    RLock                可重入锁对象。使单线程可以再次获得已经获得了的锁（递归锁定）
    Condition            条件变量对象能让一个线程停下来，等待其他线程满足了某个条件。如状态的改变或值的改变
    Event                通用的条件变量。多个线程可以等待某个事件的发生，在事件发生后，所有的线程都被激活
    Semaphore            为等待锁的线程提供一个类似“等候室”的结构
    BoundedSemaphore     与Semaphore类似，只是它不允许超过初始值
    Timer                与thread类似，只是它要等待一段时间后才开始运行

    > threading.Thread(target=func, args=(...)).start() #开启一个线程

    |使用锁
    > _lock = threading.lock()
    > with _lock:
    >     ......

\Queue
    -> 允许用户创建一个可用于多个'{线程间共享数据}'的队列数据结构
    -> 这个模块用于多线程编程,它是一个'{线程安全}'的FIFO（先进先出）的队列实现

|operator -> 操作符模块(+-*/%//>><<~^&|><==!=...)

\functools
    -> 其中的partial(偏函数)、wraps(将被包装函数的信息拷贝过来)、total_ordering(只需要定义2个__XX__方法就可实现对象对比的类装饰器)、cmp_to_key(将老式的比较函数转化为关键字函数)非常常用

Profile/cProfile -> 输出程序运行信息(时间, 堆栈)
timeit -> 计算代码运行的时间

\random
    > import random
    > random.random() #随机生成小于1的小数
    > random.randint(start, end) #随机生成指定范围的整数
    > random.shuffle(list); print(list[0]) #把列表元素随机打乱,取首元素.改变列表结构
    > random.sample(list, n) #随机取出n个列表元素,返回子列表.不改变列表结构

\itertools -> 高效迭代器
    -> step为负数意为倒序

    |切片
        itertools.islice(iterables, stop) #返回索引stop之前的序列结果集
        itertools.islice(iterables, start, stop[, step])

    |无限迭代器(Infinite Iterators) -> 默认无限生成
        itertools.count(start, step) #返回从start开始step步长
        itertools.cycle(iterable) #重复返回iterable对象的元素
        itertools.repeat(obj[, times=infinite]) #重复生成obj

    |终止于最短输入序列的迭代器(Iterators terminating on the shortest input sequence)
        itertools.chain(*iterables) #将若干个iterable对象组合为一个迭代器
        itertools.compress(list, selector) #返回和selector中True元素对应的list元素
            > list, selector = [1, 2, 3], [True, 0, 1]
            > itertools.compress(list, selector) -> iter([1, 3])

        |filter -> 同filter(func, iterable)
            itertools.filterfalse(func, iterable) #python3.x 返回不符合条件结果
            itertools.ifilter(func, iterable) #python2.x 返回符合条件结果
            itertools.ifilterfalse(func, iterable) #python2.x 返回不符合条件结果

        itertools.starmap(func, iterable) #类似map, 但func参数已经在iterable中提供,iterable必须是一个元组序列
        itertools.imap(func,*iterables) #python2.x 同map(func,iterable);python3.x没有
        itertools.izip(la, lb) #python2.x 同zip(la, lb); python3.x没有
        itertools.izip_longest(la, lb) #python2.x 最长序列压缩, 空值用None表示
            itertools.zip_longest(la, lb) #python3.x

        itertools.dropwhile(func, iterable) #从头开始舍弃满足条件的元素直至某元素不再满足
        itertools.takewhile(func, iterable) #从头开始保留满足条件的元素直至某元素不再满足

    |组合生成器(Combinatoric generators)
        |笛卡尔积 -> 又称直积, 假设集合A={a, b}，集合B={0, 1, 2}，则两个集合的笛卡尔积为{(a, 0), (a, 1), (a, 2), (b, 0), (b, 1), (b, 2)}
        itertools.product(*iterables[, repeat]) #repeat意为前方序列与自身进行直积运算

        itertools.permutations(itrable[, n=len(iterable)]) #返回itrable序列元素的排列组合 A(len(iterable), n)结果集(不同元组元素可相同)
            -> (1, 2, 3), (2, 1, 3), (3, 2, 1),...
        itertools.combinations(itrable[, n=len(iterable)]) #返回itrable序列元素的排列组合 C(len(iterable), n)结果集(不同元组元素不相同, 同一元组元素不重复)
            -> (1, 2, 3), (1, 3, 4), (2, 3, 4),...
        itertools.combinations_with_replacement(itrable[, n=len(iterable)]) #返回itrable序列元素的排列组合 C(len(iterable), n)结果集(不同元组元素不相同, 同一元组元素可重复)
            -> (1, 1, 1), (1, 1, 2), (1, 2, 2),...
        itertools.groupby(iterable, func) #根据func条件将序列元素分组
            > la = ['Jessica', 'Ross', 'Beth', 'Clare']
            > for condition, group in itertools.groupby(la, lambda s: 'e' in s):
            >     print('%s %s' % (condition, list(group)))
            -> True ['Jessica']
            -> False ['Ross']
            -> True ['Beth', 'Clare']

    itertools.accumulate(iterable) #返回序列元素累加结果集(当前元素值 + 前面所有元素和)
    itertools.tee(iterable[, n=2]) #生成指定数目的序列结果集
        -> ['a', 'b', 'c', 'd'], ['a', 'b', 'c', 'd'], ['a', 'b', 'c', 'd'],...

\collections
    -> 复杂类型。其中的OrderedDict(有序字典)、Counter(字典计数器)、defaultdict(带有默认值的字典)、namedtuple(通过创建带有字段属性的元组子类)和deque(高效实现插入和删除操作的双向列表)非常常用

    |defaultdict
        > from collections import defaultdict
        > d = defaultdict(arg_type) -> []|''|0|n #参数值为list|str|int|lambda: n

    |Counter
        > from collections import Counter
        > c = Counter() #内置计数字典cdict,内部自动按value倒序排序
        > c=Counter(k0=v0,k1=v1)|Counter(dictobj)#统计字典keys,cdict={k0:v0, k1:v1}
        > c = Counter([items]) #统计list,cdict={k0: n0, k1: n1, k2: n2}
        > c = Counter(a_str) #统计字符串,cdict={s0: n0, s1: n1, s2: n2}
        > c.most_common(n) #统计前n最多
        > c.update({key: val}) #key存在则合并值;若key不存在,val只能为int,新增{key: 1}
        > c.update([items]) #item存在则{item: val+1};item不存在则新增{item: 1}
        > c.update(a_str) #字符存在则{ch: val+1};字符不存在则新增{ch: 1}
        > c.subtract(obj) #减少记录

    |Iterxxx
        > from collections import Iterable
        > from collections import Iterator
        > isinstance([], Iterable) -> True
        > isinstance([], Iterator) -> False
        > isinstance(iter([]), Iterator) -> True

|gzip -> HTTP 请求中包含Accept-encoding: gzip头信息可以告诉服务器，如果它有任何新数据要发送给我时，请以压缩的格式发送。如果服务器支持压缩，它将返回由 gzip 压缩的数据并且使用Content-encoding: gzip头信息标记。
    import urllib2, httplib
    import StringIO
    import gzip

    def findUrlGzip(url):
       request = urllib2.Request(url)
       request.add_header('Accept-encoding', 'gzip')
       pener = urllib2.build_opener()
       f = opener.open(request)
       isGzip = f.headers.get('Content-Encoding')
       #print isGzip
       if isGzip :
           compresseddata = f.read()
           compressedstream = StringIO.StringIO(compresseddata)
           gzipper = gzip.GzipFile(fileobj=compressedstream)
           data = gzipper.read()
       else:
           data = f.read()
       return data

    def findUrlTitle(url):
           html = findUrlGzip(url)
           html = html.lower()
           spos = html.find("<title>")
           epos = html.find("</title>")
           if spos != -1 and epos != -1 and spos < epos:
               title = html[spos+7:epos]
               title = title[:-9]
           else:
               title = ""
           return title

    if __name__ == "__main__":
       url = 'http://business.sohu.com/20101010/n275509607.shtml'
       title = findUrlTitle(url)
       print title

|SimpleHTTPServer -> HTTP Server(python -m SimpleHTTPServer PORT, 就可以运行静态服务)

\Test
    |pytest -> 测试框架
    $ python -m pytest -v #启动'test_'开头的function,module,'Test'开头的class

    |DocTest -> 在docstring中建立测试用例及期望结果
    -> doctest在docstring中寻找测试用例的时候，认为>>>是一个测试用例的开始，直到遇到空行或者下一个>>>，在两个测试用例之间有其他内容的话，会被doctest忽略.可以利用这个特性为测试用例编写一些注释
    > def my_function(a, b):
    >     """
    >     >>> my_function(2, 3)
    >     6
    >     >>> my_function('a', 3)
    >     'aaa'
    >     """
    >     return a * b
        |执行
        1. $ python -m doctest test.py -v
        2. > if __name__ == "__main__":
           >    import doctest
           >    doctest.testmod()
           $ python test.py -v

    |UnitTest
        import unittest
        class XXXTest(unittest.TestCase):
            def setUp(self): pass #每个测试用例执行之前的操作
            def tearDown(self): pass #每个测试用例执行之后的操作
            @classmethod
            def tearDownClass(self): # 必须使用@classmethod, 所有test运行完后运行一次
                 print('tearDown')
            @classmethod
            def setUpClass(self): # 必须使用@classmethod,所有test运行前运行一次
                print('setUp')
            def test1(self, a, b, c): #测试用例
                self.assertEqual(a+b, c) #if a+b == c
            def test2(self): #测试用例
                self.assertIs(condition, True) #if condition is True
                self.assertEqual(a, b)     # a == b
                self.assertNotEqual(a, b)     # a != b
                self.assertTrue(x)     # bool(x) is True
                self.assertFalse(x)     # bool(x) is False
                self.assertIsNone(x)     # x is None
                self.assertIsNotNone(x)     # x is not None
                self.assertIn(a, b)     # a in b
                self.assertNotIn(a, b)     # a not in b
        if __name__ == '__main__':
            |执行
            1. unittest.main() #一次性执行测试所有用例
            2. #测试套件
               test_suite = unittest.TestSuite()#创建一个测试套件
               test_suite.addTest(XXXTest('test1'))#添加一个测试用例
               test_suite.addTest(unittest.makeSuite(XXXTest))#添加所有的测试用例

               #生成执行用例的对象
               import HTMLTestRunner
               fp = open('res.html','wb')#打开一个保存测试报告的html文件
               runner = HTMLTestRunner.HTMLTestRunner(stream=fp,title='api测试报告',description='测试情况')
               runner.run(test_suite) #执行测试套件

\Arch
    Django -> 大而全,模板引擎运算慢
    Flask -> 小而少,模板引擎运算快
    Tornado -> 适合大型项目,丰富的异步API
    Celery -> 分布式异步任务队列管理
    Gevent, Asyncio -> 异步协程框架
    Mako -> 前端模板

\Third party modules
    1.requests #人性化的HTTP请求库
    2.pip #Python包和依赖关系管理工具
    3.virtualenv #创建独立Python环境的工具
    4.IPython #附带额外功能的交互环境
    5.httpie #一个命令行HTTP客户端,cURL的替代品,易用性更好
    6.Cython #优化的Python静态编译器.使用类型混合使Python编译成C/C++模块来极大地提升性能
    7.pycodestyle #就是原来的pep8,帮你检查代码是否符合PEP8标准
    8.Flake8 #静态检查工具,包含PyFlakes(静态检查Python代码逻辑错误)、pycodestyle和McCabe(分析Python代码复杂度)三个工具
    9.gevent #为Python提供了比较完善的协程支持
    10.PyPy #用Python实现的Python编译器,速度超快,是对CPython的替代
    11.objgraph #对于查找内存泄露非常有用
    12.Pandas #大数据处理
    13.pyspark #大数据处理
    14.jieba #中文分词
    15.disutils #setup.py 编译打包
