|CPython
    -> Python'{默认解释器}'
    -> 当我们从Python官方网站下载并安装好Python 3.x后，就直接获得了一个官方版本的解释器:CPython。这个解释器是用C开发的，所以叫CPython。在命令行下运行python就是启动CPython

|PyPy -> 即时(JIT)编译器。它不关心Python代码的词法分析和语法树.用Python编写，直接利用Python的Code Object. Code Object是Python字节码的表示，也就是说，PyPy直接分析Python代码所对应的字节码,这些字节码即不是以字符形式也不是以某种二进制格式保存在文件中，而是在Python运行环境中

|Profile/cProfile -> python性能分析
    import profile; profile.run("func()")
    python -m cProfile filename.py

    ncalls -> 表示函数调用的次数
    tottime -> 表示指定函数的总的运行时间,除掉函数中调用子函数的运行时间
    percall -> (第一个 percall)等于 tottime/ncalls
    cumtime -> 表示该函数及其所有子函数的调用运行的时间,即函数开始调用到返回的时间
    percall -> (第二个 percall)即函数运行一次的平均时间,等于cumtime/ncalls
    filename:lineno(function) -> 每个函数调用的具体信息

|memory_profiler -> 逐行测算内存使用, 统计内存使用情况
    > from memory_profiler import profile
    > @profile
    > def func(): pass

|timeit -> 返回代码运行时间(secs)
    -> number可以省略,默认值为1000000
    -> repeat和timeit相似,repeat参数表示重复测试的次数(可以省略.默认值为3),返回一个时间列表

    > from timeit import timeit
    > t = timeit('y=map(lambda x:x*2,range(32))', number=1, repeat=5)
    > print(t)

    > from timeit import timeit
    > t = timeit('func()', 'from __main__ import func', number=1)
    > print(t)

    > from timeit import repeat
    > tl = repeat('func()', 'from __main__ import func', number=100, repeat=5)

raise SystemExit(1) #直接退出(0为正常, 1-127为非正常)
raise SystemExit('It failed!') #打印信息后退出

避免使用"global"关键字。python访问局部变量会比全局变量要快得多

if exp is not None > if exp != None

x<y<z > x<y and y<z

while 1 > while True

if i is True > if i == True

a**n > pow(a, n) #a的n次方

a,b=b,a > t=a;a=b;b=t #交换

build-in函数通常较快, 因为内置函数是'{C}'写的

查找访问等操作字典dict最快O(1)

set的union,intersection,difference操作要比list的迭代要快.因此如果涉及到求list交集,并集或者差集的问题可以将list转换为set来操作

\内存
    |初始内存(字节)
        -> {} > [] > () > '' > 0|True|False > None
        {}                                          280
            {'x':'y'}                               280
            {'a':1,'b':2}                           280
            {'a':1,'b':2,'c':3,'d':4,'e':5,'f':6}   1048
        set()                                       232
            set([1,2,3])                            232
            set([1,2,3,4,5,6])                      744
        []                                          72
            [0|'']                                  80
            [1, 'a']                                88
        ()                                          56
            (1,)                                    64
            (1,2)                                   72
            (1,2,3)                                 80
        ''                                          37
            'abc'                                   40
            '的'                                     40
            '好的'                                   43
        0|0.0|int()                                 24
            999999                                  24
            long()                                  24
            long(1)                                 28
            True|False                              24
        None                                        16
        object()                                    16

    |内存优化
        -> 尽量使用immutable而不是mutable对象
        -> tuple > list
        -> frozenset > set
        -> 尽量使用迭代器
        -> for循环使'{用生成器}',循环外计算列表长度
        -> list.append+join > +拼接字符串
        -> 函数的开销很大.尽量把循环放在函数内进行.而不要让每次迭代都调用函数

    |内存泄漏(Memory Leak)
    -> 程序中己动态分配的'{堆内存}'由于某种原因程序'{未释放或无法释放}',造成系统内存的浪费,导致程序运行速度减慢甚至系统崩溃等严重后果
    原因 -> 全局变量未释放, 循环引用
    > import gc; gc.collect() #强制进行垃圾回收
    > import objgraph; objgraph.show_most_common_types(n) #打印前n大内存对象

port = dictobj.get('port', 3306) #获取字典对象中指定key的值,默认为3306

'{python2.x}' -> dict.iteritems()返回迭代器; '{python3.x}'没有
    for k, v in dict.iteritems() > for k, v in dict.items()

使用关键字排序list.sort(key=operator.itemgetter(0))

l1 = list(l),d1 = dict(d) > 列表推导式 #复制一个列表或者字典
l1 = map(f,l) > l1 = [f(x) for x in l] #对列表的每一个元素都调用函数

使用enumerate遍历list
    > L = [i*i for i in range(5)]
    > for (i,data) in enumerate(L) #括号可省略.items<200带括号性能高,>200不带括号性能高

'{推导式和map}'都是直接调用C函数, 比for循环快一倍多
使用列表推导式和+代替在for循环中list.append
列表推导式的效率比map慢一点点

|itertools -> 以C语言编写，所以提供了最高效的迭代器

反序列化使用'{json}'

python中条件表达式是'{lazy evaluation}'的，也就是说如果存在条件表达式if x and y，在x 为false的情况下y表达式的值将不再计算。利用该特性在一定程度上可提高效率

对于and,应该把'{满足条件少}'的放在前面,对于or,把'{满足条件多}'的放在前面

对于CPU密集型的程序，可以使用multiprocessing的Process,Pool，通过多进程的方式实现并行计算
对于IO密集型的程序，multiprocessing.dummy模块使用threading，实现多线程
> from multiprocessing.dummy import Pool
> pool.map(function, urls) #使用并发map
