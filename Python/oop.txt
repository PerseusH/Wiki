\生产者消费者模型
    -> 有两个进程：一组生产者进程和一组消费者进程共享一个初始为空、固定大小为n的缓冲区(消息队列)。生产者制造数据，只有缓冲区没满时，生产者才能把消息放入到缓冲区，否则必须等待; 同时，只有缓冲区不空时，消费者才能从中取出消息（即将其从缓存中移出），否则必须等待
    -> 缓冲区是临界资源，生产者和消费者对缓冲区的访问是互斥关系.它只允许一个生产者放入消息，或者一个消费者从中取出消息

    |核心问题
        1.要保证不让生产者向满的缓存内写数据
        2.要保证不让消费者试图从空的缓存中取数据


\观察者模式

\发布订阅模式

\控制反转
    -> (Inversion of Control,缩写为IoC),是面向对象编程中的一种设计原则
    -> 用来降低代码之间的耦合度
    -> 最常见的方式是依赖注入(Dependency Injection,简称DI)
    -> 还有一种方式是依赖查找(Dependency Lookup)
    -> 通过控制反转,对象在被创建的时候,由一个调控系统内所有对象的外界实体
    -> 将其所依赖的对象的引用传递给它.也可以说,依赖被注入到对象中

\单例模式
    -> 实例的唯一性并不重要,应该关注的是实例的状态,只要所有的实例共享状态,行为一致,就达到了目的
    -> Python中,模块只初始化一次,所有变量归属某个模块,import是线程安全的.所以模块是天然的单例

\工厂模式
