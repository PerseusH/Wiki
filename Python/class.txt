-> 类是一个对象,在运行时由type()动态创建, 每个class都是type类的一个实例
-> class的类型是type, 类实例的类型是类名(type(xxx))
-> 创建一个类时, python会默认将该类所有'{属性}'收集到一个'{字典__dict__}'中
-> self代表类的实例, 而非类

|__slots__(类属性)
    -> 类属性默认用dict存储(内存: {} > [] > ()), __slots__是用'{list或元组}'存储属性名, 而不会再使用__dict__, __slots__里没有的属性, 类实例不能随便添加
    -> 优点: '{节省了内存}', 限制了属性添加
    -> 定义了__slots__后, slots中的变量就变成了类描述符
    -> 定义了__slots__后__dict__, __weakref__会消失. 如果还想在之后添加新变量或使用__weakref__, 则需要把'__dict__', '__weakref__'添加到__slots__中
    -> __slots__只影响本类, '{不影响父类和子类}'
    -> 在类的'{属性固定且经常生成大量实例}'的情况下适合使用__slots__
    > class Test(object):
    >     __slots__ = ['a', 'b', 'c'] | 'a', 'b', 'c'

|多继承 -> 多继承链为'{mro序列}'
    > class D(A, B, C): pass
    -> '{经典类}'的继承链遍历是'{深度优先}'; '{新式类}'是广度优先, '{拓扑排序}'(从下到上, 按括号内父类顺序从左到右或从右到左)

|类变量 -> 在类中不在self中的属性是类变量, 类的所有实例都能访问
    -> 修改'{类本身}'的类变量值后, 所有与该变量相关的子类和实例都受影响
    -> '{原地操作修改实例或子类}'中的类变量值后,所有与该变量相关的子类和实例都受影响
    -> '{非原地操作修改实例或子类}'中的类变量值后,只改变实例或子类本身,且不再受基类的影响

|attr
    self.__class__ -> <class '__[module]__.ClassName'> #class of self
    self.__class__.__name__ -> 'ClassName' #class name
    self.__module__ #ModuleName
    self._abc #类的保护变量, 只允许类本身和子类访问, 'from...import...'不能访问
    self.__abc #类的私有变量, 只允许类本身访问
    self.__abc__ #类的特殊变量, 可以被外部直接访问
    self.__bases__ #'{直接父类对象}'的元组, 不包含更上层的父类对象
    self.__dict__ #类的所有属性, 方法字典
    self.__name__ #类名
    cls.__mro__ #继承链父类元组, 多继承按此元组元素次序解析

|Wierd
    > class A(object):
    >     def foo(self): pass
    > a = A()
    > a.foo == a.foo #True
    > a.foo is a.foo #False
    > id(a.foo) == id(a.foo) #True

    > x, y = a.foo, a.foo
    > x == y #True
    > x is y #False
    > id(x) == id(y) #False

|MetaClass -> metaclass的意义在于对'{类属性字典}'的统一抽象操作(数据库读写, orm框架)
    > class TestMetaClass(type):
    >     def __new__(cls, name, bases, attrs):pass
    >         # cls -> <class '__main__.TestMetaClass'>
    >         # name -> 'Test' #派生类类名
    >         # bases -> (<class 'dict'>,) #派生类的父类序列
    >         # attrs -> {'__init__': ..., '__doc__': '...',...} #派生类属性

    >     def __call__(cls, *args, **kw): #派生类实例化时执行, cls为派生类
    >         obj = cls.__new__(cls, *args, **kw)
    >         cls.__init__(obj, *args, **kw)
    >         <=>
    >         obj = super().__call__(*args, **kw) #type.__call__(*args, **kw)
    >         return obj

    > class Test(dict): #python2.x
    >     __metaclass__ = TestMetaClass

    > class Test(dict, metaclass=TestMetaClass): #python3.x

|Descriptor -> 定义了__set__, __get__, __delete__方法的类, 用来拦截对实例字典的访问
    -> 只对新式类和实例有效, 因为__getattribute__是新式类特性
    |数据描述符 -> 定义了__set__, __delete__方法的描述符
    |非数据描述符 -> 只定义了__get__, 未定义__set__, __delete__方法的描述符
    |实例__dict__默认为{}
    |obj.bar <=> obj.__dict__['bar'], 访问obj.bar实例属性时不会直接访问实例字典, 而是先调用__getattribute__获取属性, 通过__setattribute__修改属性, 这两个方法的作用对象是obj.__dict__. 如果找不到属性, 则抛异常AttributeError; 如果定义了__getattr__, 则不会抛异常
    |子类定义的__getattribute__, __getattr__会覆盖父类. 父类定义子类未定义则调用父类
    |实例属性查找优先顺序(查找链最长)
        1.__getattribute__方法(无条件自动调用)
        2.实例__dict__
        3.类__dict__
        4.继承链父类__dict__
        5.__getattr__方法, 如果定义了该方法, 找不到属性的情况下调用该方法(未定义则报错)

    |描述符查找优先顺序
        1.__getattribute__方法(无条件自动调用, 若人为重载该方法会导致无法调用描述符)
        2.数据描述符(由__getattribute__触发, 调用desc.__get__())
        3.实例__dict__
        4.类__dict__
        5.非数据描述符
        6.继承链父类__dict__
        7.__getattr__方法, 如果定义了该方法, 找不到属性的情况下调用该方法(未定义则报错)

    |作用 -> 拦截对实例属性的访问(hook), 控制属性读写
        > class RevealAccess(object): #Descriptor
        >     def __init__(self, initval=None, name='var'):
        >         self.val = initval
        >         self.name = name
        >     def __get__(self, obj, objtype):
        >         print "Retrieving val"
        >         return self.val
        >     def __set__(self, obj, value):
        >         print "Updating val"
        >         self.val = value
        >     def __delete__(self):
        >         print "Deleting val"
        >         del self.val
        > class MyClass(object):
        >     x = RevealAccess(10, 'var "x"')
        > c = MyClass(); c.x; c.x = 20

    |实际应用 -> 实例方法, 静态方法, 类方法, super, property

|New-style class(新型类) -> class C:(Classic) | class C(object):(New-style)
    -> new-style classes是python在2.2版本开始加入的一个重要特性。所有的内建类型都是new-style classes。所有新型类都可以使用type
    -> '{object}'和所有直接或间接以它为'{基类}'的类是new-style classes
    -> python2.x新式类需显式继承object, python3.x默认为新式类, 不需要显式继承object
    -> 在经典类中，任意instance的type都是'instance'。所以不能用type判断类型
    -> 引入new-style classes，就是为了逐步弥合python中内建类型和classic classes之间的鸿沟。至此，内建类型终于可以和classic classes一样，在定义类时作为基类被继承
    -> 新型类的元类是type; 经典类的元类是types.ClassType
    -> 新型类新增了许多特性: 特殊方法, descriptor, classmethod, staticmethod, property, super

    |特殊方法(除了'{经典类}'的__doc__, __module__外其余都属于'{新式类}'新增属性)
        > def __call__(self, *args, **kw): pass #for instance(args), 实例方法
        > def __new__(cls, *args, **kw): pass #before __init__, 静态方法
        |__new__ -> __init__用来控制类的实例的初始化，而__new__控制初始化之前的行为(也就是实例的生成). __new__的第一个参数是类(cls)，而不是self, (普通类)每次传入的cls都是同一个对象. __new__的作用是拦截实例初始化过程(hook), 返回一个cls实例, 这个实例就是__init__方法接收的默认参数self
        -> 派生类__new__在类实例化时运行, 除cls外参数默认为空; 元类__new__在元类定义时运行, 除cls外参数默认不为空(每个派生类都会执行一遍元类__new__, 本质是元类实例化为派生类, 派生类为元类实例)
        -> __init__(self)只能返回None, 否则报错; 若__new__返回值类型与父类不同或没有返回值或返回None,则__init__不会被调用(没有创建实例对象, init也没有意义)
        -> 元类__call__首参数为派生类(派生类为元类实例), 派生类__call__首参数为类实例
        -> 元类调用type.__call__等价于调用派生类的__new__加__init__.元类定义了__call__则优先执行元类__call__, 派生类__new__和__init__只能在元类__call__中调用, 否则不会执行; 元类未定义__call__则优先执行派生类__new__
        -> __call__ <=> callable(obj)
        > class Test(object): pass <=> type.__new__ + type.__init__
        > t = Test() <=> type.__call__ <=> Test.__new__ + Test.__init__
        -> 实例值(self)获取顺序依次是:
            1.元类__call__返回值
            2.元类__call__未定义则为派生类__new__返回值
            3.派生类__new__未定义则为父类默认值(dict:{}, int:0, str:'')
            4.父类为object或为空则为<__main__.Test object at 0x0000014D41B53630>

    |classmethod -> 添加了@classmethod的函数的第一个参数总是该函数所在类的类名
    |staticmethod -> 使用了静态方法@staticmethod，则不能再使用self

    |property -> 为了使对类属性的操作可控, 可以检查参数
        -> 添加了@property的函数可以添加@attr_name.setter方法以设置属性值,没添加setter方法的@property函数为只读属性,只有getter方法(@property)
        > @property #getter
        > def value(self):
        >     return self._value

        > @value.setter #setter
        > def value(self, val):
        >     self._value = val

        |内建函数property -> 对类属性的读写控制
            > class MyClass(object):
            >     def __init__(self):
            >         self.__x = 1
            >     def getx(self):
            >         print "Retrieving x"
            >         return self.__x
            >     def setx(self, value):
            >         print "Updating x"
            >         self.__x = value
            >     def delx(self):
            >         print "Deleting x"
            >         del self.__x
            >     x = property(getx, setx, delx, "I'm the x property")
            > c = MyClass(); c.x; c.x = 20; del c.x

    |super -> 继承链父类对象(cls.__mro__)
        -> super(Class,self).xxx(python2.x)<=>super().xxx(python3.x)
        -> 根据MRO序列保证继承链上的每个父类方法只调用一次
        >  super().__new__(cls, *args, **kw)
        >  super().__init__(*args, **kw)
        >  super().__call__(*args, **kw)
