    函数截留
    自定义DOM事件
    页面宽高获取
    JS单例模式
    点击后退按钮页面不刷新
    mouseover&mouseout和mouseenter的区别
      mouseover&mouseout默认冒泡
      mouseenter&mouseleave不支持冒泡
    alert(1 && 2)
    CSS3中引发GPU硬件加速的方法
    IOS从哪个版本开始支持position: fixed
    jQuery怎样封装一个DOM对象
    jQuery运行过程
    jQuery中on, live, delegate, bind等方法的区别
    jQuery链式调用实现机制，最后指针指向哪里

    观察者模式的本质是事件队列的抽象

    函数在定义它的作用域中执行。
    js调试：debugger

    图片选择后预览：
      $("#file").on('change', function(){
          var files = this.files;
          if (files) {
              var reader = new FileReader();
              reader.onload = function() {
                  $('#img').attr('src', reader.result);
              }
              reader.readAsDataURL(files[0]);
          }
      })

    原生API
    document.createDocumentFragment()    //创建一个DOM片段
    document.createElement()   //创建一个具体的元素
    document.createTextNode()   //创建一个文本节点
    var div = document.createElement("div");
    target.appendChild(div);
    target.insertBefore(div, existingChild);
    target.removeChild(existingChild); //移出一个元素,返回被移出元素
    target.replaceChild(existingChild); //替换
    document.getElementsByTagName()    //通过标签名称
    document.getElementsByName()     //通过元素的Name属性的值
    document.getElementById()        //通过元素Id，唯一性

    冒泡机制--事件代理(委托)
    /*冒泡机制*/
    function click(e){
      var e = e || window.event;
      var target = e.target || e.srcElement;
      if(target.tagName.toLowerCase() === ‘td’) {
        alert(target.innerHTML);
      }
    }

    AJAX原生代码，工作原理--comet(http长连接)--多人在线聊天室，服务器端推送
      var xmlHttp;
      function createxmlHttpRequest() {
        if (window.ActiveXObject) {//IE
          xmlHttp = new ActiveXObject("Microsoft.XMLHTTP");
        } else if (window.XMLHttpRequest) {//others
          xmlHttp = new XMLHttpRequest();
        }
      }
      function doGet(url){
        // 注意在传参数值的时候最好使用encodeURI处理一下，以防出现乱码
        createxmlHttpRequest();
        xmlHttp.open("GET",url);
        xmlHttp.send(null);
        xmlHttp.onreadystatechange = function() {
          if ((xmlHttp.readyState == 4) && (xmlHttp.status == 200)) {
            alert('success');
          } else {
            alert('fail');
          }
        }
      }
      function doPost(url,data){
        // 注意在传参数值的时候最好使用encodeURI处理一下，以防出现乱码
        createxmlHttpRequest();
        xmlHttp.open("POST",url);
        xmlHttp.setRequestHeader("Content-Type","application/x-www-form-urlencoded");
        xmlHttp.send(data);
        xmlHttp.onreadystatechange = function() {
          if ((xmlHttp.readyState == 4) && (xmlHttp.status == 200)) {
            alert('success');
          } else {
            alert('fail');
          }
        }
      }

    原型链--继承

    什么是闭包，如何使用它，为什么要使用它？setInterval
      从外部访问一个函数的内部对象
      function Dog() {
          this.wow = function() {
             alert('Wow');
          }
          this.yelp = function() {
             this.wow();
          }
      }
      function MadDog() {
          this.yelp = function() {
              var self = this;
              setInterval(function() {
                  self.wow();//闭包
              }, 500);
          }
      }
      MadDog.prototype = new Dog();
      //for test
      var dog = new Dog();
      dog.yelp();
      var madDog = new MadDog();
      madDog.yelp();

    描述一种 JavaScript 中实现 memoization(避免重复运算)的策略。
      把函数的每次执行结果都放入一个键值对(数组也可以，视情况而定)中，在接下来的执行中，在键值对中查找是否已经有相应执行过的值，如果有，直接返回该值，没有才 真正执行函数体的求值部分。

      数组去除重复元素算法
      var arr = [1,2,"1",2,"1",3,4,1,3,5];
      Array.prototype.distinct = function(){
          var memon = [];
          var memos = [];
          for(var i = 0; i < this.length;){
              if(typeof arr[i] === "number"){
                  if(memon[arr[i]]){
                      this.splice(i, 1);
                  } else {
                      memon[arr[i++]] = 1;
                  }
              } else {
                  if(memos[arr[i]]){
                      this.splice(i, 1);
                  } else {
                      memos[arr[i++]] = 1;
                  }
              }

          }
      }

    浏览器兼容性--jquery源码
      attachEvent(IE) & addEventListener(Others)
      attribute & property (自定义属性property在IE下可以用属性名直接访问，也可以用getAttribute()访问，其他浏览器只能用getAttribute())
      obj.style.cssText = 'color:red;'(IE) & obj.setAttribute('style','color:red')(Others)
      obj.className='styleClass';|obj.setAttribute('className','styleClass')(IE) & obj.className='styleClass';|obj.setAttribute('class|className','styleClass')(Others)
      obj.setAttribute('onclick','funcitonname();');(IE不支持，其他浏览器都支持)
      window.event(IE)
      event.srcElement(IE) & event.target(Others)
      event.x|y(IE) & event.pageX|pageY(Others)
      document.[domId](IE)
      window.ActiveXObject(IE) & window.XMLHttpRequest(Others)
      IE下可以打开模态窗口(showModalDialog)和非模态窗口(showModelessDialog)，其他浏览器不能。解决方法：直接用window.open(url, name, parameters)
      访问frame对象，window.frameId|frameName(IE) & window.frameName(Others)。解决方法：用window.document.getElementById(frameId)
      访问父结点，obj.parentElement|parentNode(IE) & obj.parentNode(Others)
      innerText|innerHTML|outerHTML(IE) & textContent|innerHTML(Others)
      table操作：在ie中不允许对table和tr的innerHTML赋值，不能使用appendChild增加一个tr。appendChild在往表里插入tr时FIREFOX支持，IE不支持
                 解决办法：把行插入到TBODY中，不要直接插入到表（Jquery的append(html)方法使用的兼容方式）
      FireFox中类似 obj.style.height = imgObj.height 的语句无效，IE中有效。
                 解决方法：统一使用 obj.style.height = imgObj.height + 'px';
      建立单选钮：
                 IE:
                 var rdo =document.createElement('<input name="radiobtn" type="radio" value="checked" />');
                 其他浏览器
                 var rdo = document.createElement('input');
                 rdo.setAttribute('type','radio');
                 rdo.setAttribute('name','radiobtn');
                 rdo.setAttribute('value','checked');
                 解决办法：
                 这一点区别和前面的都不一样。这次完全不同，所以找不到共同的办法来解决，那么只有IF-ELSE了
                 万幸的是，IE可以识别出document的uniqueID属性，别的浏览器都不可以识别出这一属性。问题解决。

    Object.keys({"A":"a","B":"b"});//["A","B"]

    取url的锚点参数
    window.location.hash

    Math.floor(Math.random() * scope + start) /* 随机数 */

    document.cookie
    cookie设置，过期时间--优化(隔离静态资源http访问，设置子域名)
    手动设置缓存过期

    变量作用域--闭包--垃圾回收机制
      var ar = 'arg';
      function aa(){
        console.log(ar);//undefined
        var ar = 'x';
        console.log(ar);//x
      }
      aa();
      console.log(ar);//arg

    iframe跨域
    自定义UI组件
    copy一个数组:arr.slice(0, arr.length)

    localStorage更新机制
    localStorage.setItem("key","value");//以“key”为名称存储一个值“value”
    localStorage.getItem("key");//获取名称为“key”的值
    sessionStorage.setItem("key","value");//以“key”为名称存储一个值“value”
    sessionStorage.getItem("key");//获取名称为“key”的值
    localStorage生命周期是永久，这意味着除非用户显式在浏览器提供的UI上清除localStorage信息，否则这些信息将永远存在。
    sessionStorage生命周期为当前窗口或标签页，一旦窗口或标签页被永久关闭了，那么所有通过sessionStorage存储的数据也就被清空了。

    "2"-1 --> 1
    "2"+1 --> "21"
    1+"2" --> "12"

    obj.attachEvent("onclick", func1);//for IE
    obj.attachEvent("onclick", func2);//for IE
    obj.attachEvent("onclick", func3);//for IE
    //func3->func2->func1

    obj.addEventListener("click", func1, false);//for others
    obj.addEventListener("click", func2, false);//for others
    obj.addEventListener("click", func3, false);//for others
    //func1->func2->func3

    obj.onclick = func;//or else
    obj["onclick"] = func;//or else

    <form id="form1" name="form1" method="post" action=""  onsubmit="return checkform(this)">
       <input type="radio" name="oo" value="radiobutton" />
       <input type="radio" name="oo" value="radiobutton" />
       <input type="submit" name="Submit" value="提交" />
    </form>
    $('#form1').submit(function(){return checkform(this)});

    instanceof 用于判断一个变量是否某个对象的实例，如 var a=new Array();alert(a instanceof Array); 会返回 true，同时 alert(a instanceof Object)也会返回 true;这是因为 Array 是 object 的子类。

    解释下 JavaScript 中 this 是如何工作的。
      指向调用者(当前上下文)，function的this在实例化后被实例对象替换

    你是如何测试JavaScript代码的？
      Jasmine

    AMD vs. CommonJS？
      AMD规范->Asynchronous Module Definition,即异步模块加载机制, requireJS，NodeJs，Dojo，JQuery
      CommonJS规范->native js api, Nodejs

    什么是哈希表？
      键值对数据结构，时间复杂度为O(1)

    解释下为什么接下来这段代码不是 IIFE(立即调用的函数表达式)：function foo(){ }();.
      function关键字默认表示function declaration，而不是function expression。function foo(){ }()会报缺少标识符的错误。

    要做哪些改动使它变成 IIFE?
      (function foo(){ }());//function expression
      (function foo(){ })();//function expression

    解释 “JavaScript 模块模式” 以及你在何时使用它。
      使用立即执行函数IIFE

    如果你的模块没有自己的命名空间会怎么样？
      代码污染

    == 和 === 有什么不同？
      ==转换类型，===不转换

    描述以下变量的区别：null，undefined 或 undeclared？该如何检测它们？
      null == undefined  true
      null === undefined  false
      typeof null object
      typeof undefined undefined
      null != NaN !=  undefined
      typeof NaN number

    只有function可以形成作用域，其他方式(while, for, switch etc.)不能形成作用域。

    请解释变量声明提升(hoisting机制)。
      JavaScript引擎在执行的时候，会把所有变量的声明都提升到当前作用域的最前面。

    .call 和 .apply 的区别是什么？
      obj.call(o, arg0, arg1, arg2, ...);
      obj.apply(o, [arg0, arg1, arg2, ...]);

    functionName.caller and arguments.callee?
      var foo = function(){
          console.log("caller:");
          console.log(foo.caller);
          console.log("callee:");
          console.log(arguments.callee);
      }
      var f = function(){foo();}
      f();
      caller: function(){foo();}
      callee: function(){
                  console.log("caller");
                  console.log(foo.caller);console.log("callee");
                  console.log(arguments.callee);
              }

    请指出 JavaScript 宿主对象（host object）和原生对象（native object）的区别？
      原生对象(native object)(需要new)
        独立于宿主环境的 ECMAScript 实现提供的对象
        Object、Function、Array、String、Boolean、Number、Date、RegExp、Error、EvalError、RangeError、ReferenceError、SyntaxError、TypeError、URIError、ActiveXObject(服务器方面)、Enumerator(集合遍历类)

      宿主对象(host object)(BOM DOM & 自定义对象)
        BOM: Window, Navigator, Screen, History, Location
        DOM: Documewnt, body, Area, form, button, input, Frame, script, table etc.
        “宿主”是网页的运行环境，即“操作系统”和“浏览器”。所有非本地对象都是宿主对象（host object），即由 ECMAScript 实现的宿主环境提供的对象。
        所有的BOM和DOM对象都是宿主对象。因为其对于不同的“宿主”环境所展示的内容不同。其实说白了就是，ECMAScript官方未定义的对象都属于宿主对象，因为其未定义的对象大多数是自己通过ECMAScript程序创建的对象。TML DOM 是 W3C 标准（是 HTML 文档对

    请解释 Function.prototype.bind象模型的英文缩写，Document Object Model for HTML）。
 的作用？
      EcmaScript5给Function扩展了一个方法：bind
      作用：改变上下文的this，与call很相似，返回值是函数
      //使用bind是 返回改变上下文this后的函数
      var a = func.bind(obj, "bind", "");
      a();
      //使用call是 改变上下文this并执行函数
      var b = func.call(obj, "call", "");

    你如何从浏览器的 URL 中获取查询字符串参数。
      var arr = url.split("?")[1].split("&");
      for(var i = 0; i < arr.length; i++){
        var item = arr.split("=");
        if(item[0] == "name"){
          return item[1];
        }
      }

    请举出一个匿名函数的典型用例？
      回调函数

    指出下列代码的区别：
      function Person(){} //function declaration
      var person = Person(); //a Person() return type object
      var person = new Person(); //a Person object

    在什么时候你会使用 document.write()？
      大多数生成的广告代码依旧使用 document.write()，虽然这种用法会让人很不爽。

    请指出浏览器特性检测，特性推断和浏览器 UA 字符串嗅探的区别？
      function selfUserAgent(){
        if(window.ActiveXObject){ //MSIE 6.0 or below
            //判断是否是IE 7以上
            if(document.documentElement && typeof document.documentElement.style.maxHeight != "undefined" ){
               //判断是否是IE8+
               if(typeof document.adoptNode != "undefined"){//Safari3 & FF & Opera & Chrome & IE8+
                   return "IE8及以上";
               }
               return "IE7及以上";
            }
           return "MSIE 6.0 or below";
       }else if(typeof window.opera != "undefined"){ //Opera 独占
            return "Opera";
       }else if(typeof window.netscape != "undefined"){ //mozilla 独占
            if(typeof window.Iterator != "undefined"){
                if(typeof document.styleSheetSets != "undefined"){//Firefox &Opera 9
                    return "firefox 3及以上";
                }
                return "firefox 2";
            }
            return "Mozilla 1";
       }else if(typeof window.pageXOffset != "undefined"){ //Mozilla & safari
           try{
               if(typeof external.AddSearchProvider != "undefined"){ //firefox & chrome
                   return "chrome";
                }
            } catch (e) {
                return "safari";
            }
        }else { //unknown
            return "unknown";
        }
    }

    你使用过 JavaScript模板系统吗？
      Ext.js,D3.js

    如有使用过，请谈谈你都使用过哪些库，比如 Mustache.js，Handlebars 等等。
      Angular.js

    "attribute" 和 "property" 的区别是什么？
      IE6-7中无区别
      attribute是和dom相关的属性，在HTML代码中可见
      property是js对象键值对属性
      id和class既是attribute，也有对应的property，不管使用哪种方法都可以访问和修改
      elem.getAttribute('id');
      elem.setAttribute('id', 'testVal');
      elem.removeAttribute('id');
      elem.id = 'hello';
      elem.class = 'hello';
      console.log(radio.getAttribute('checked')); // checked
      console.log(radio.checked); // true

    为什么扩展javascript内置对象是个坏做法
      因为你不知道哪一天浏览器或javascript本身就会实现这个方法，而且和你扩展的实现有不一致的表现。到时候你的javascript代码可能已经在无数个页面中执行了数年，而浏览器的实现导致所有使用扩展原型的代码都崩溃了。

    请指出 document load 和 document ready 两个事件的区别。
      Dom Ready是在dom加载完成后就可以直接对dom进行操作，比如一张图片只要<img>标签完成，不用等这个图片加载完成，就可以设置图片的宽高的属性或样式等； 
      Dom Load是在整个document文档（包括了加载图片等其他信息）加载完成后就可以直接对dom进行操作，比如一张图片要等这个图标加载完成之后才能设置图片的宽高的属性或样式等；

    请解释一下JavaScript的同源策略。
      在JavaScript中，有一个很重要的安全性限制，被称为“Same-Origin Policy”（同源策略）。这一策略对于JavaScript代码能够访问的页面内容做了很重要的限制，即JavaScript只能访问与包含它的文档在同一域下的内容。
      所谓同源是指，域名，协议，端口相同。

    请解释 JSONP 的工作原理，以及它为什么不是真正的 AJAX。
      ajax的核心是通过XmlHttpRequest从服务器获得非本页数据，然后用javascript来操作DOM而更新页面，而jsonp的核心则是动态添加<script>标签来调用服务器提供的js脚本。

    如何实现这些代码：[1,2,3,4,5].duplicator(); //[1,2,3,4,5,1,2,3,4,5]
      Array.prototype.duplicator = function(){
          var len = this.length;
          for(var i = 0; i < len; i++){
              this.push(this[i]);
          }
      }

    什么是 "use strict"; ? 使用它的好处和坏处分别是什么？
      好处：
        // 限制函数中的arguments改变参数
        var run = function(fromWhom){
            arguments[0] = 'alien';//arguments[0]即fromWhom，use strict模式下无效
            alert(fromWhom);
        }
        run('zombie');//显示'alien'，use strict模式下显示'zombie'，
        // 检查对象中的重复键
        var o = {x:"123",x:"12"};
        eval("var c = 3;");alert(c);
        // 检查未声明变量
        c = 3;
        // 检查重复的参数
        function foo(x, x){};
        // 检查只读属性是否被修改
        var person = {};
        Object.defineProperty(person, "name", {
          writable: false,
          value: "Nick"
        });
        person.name = "";

      坏处：
        可能会使其他引入的脚本抛异常

    页面滚动至指定位置：
      $('html, body').animate({
          scrollTop: $(targetSelector).offset().top + 'px'
      }, time);

jQuery:

    解释"chaining"。

    解释"deferreds"。

    你知道哪些针对 jQuery 的优化方法。

    请解释 .end() 的用途。

    你如何给一个事件处理函数命名空间，为什么要这样做？

    请说出你可以传递给 jQuery 方法的四种不同值。

    选择器（字符串），HTML（字符串），回调函数，HTML元素，对象，数组，元素数组，jQuery对象等。

    什么是效果队列？

    请指出 .get()，[]，eq() 的区别。

    请指出 $ 和 $.fn 的区别，或者说出 $.fn 的用途。

    请优化下列选择器：
      $(".foo div#bar:eq(0)")
      $(".foo").find("#bar").first()

代码相关的问题：

    modulo(12, 5) // 2
    问题：实现满足上述结果的modulo函数

    "i'm a lasagna hog".split("").reverse().join("");
    问题：上面的语句的返回值是什么？ 答案："goh angasal a m'i"

√   ( window.foo || ( window.foo = "bar" ) );
    问题：window.foo 的值是什么？ 答案："bar" 只有 window.foo 为假时的才是上面答案，否则就是它本身的值。

    var foo = "Hello"; (function() { var bar = " World"; alert(foo + bar); })(); alert(foo + bar);
    问题：上面两个 alert 的结果是什么 答案: "Hello World" 和 ReferenceError: bar is not defined

√   var foo = [];
    foo.push(1);
    foo.push(2);
    问题：foo.length 的值是什么？ 答案：2

    var v = "hello";
    (function(){
      console.log(v);
      var v = "world";
    })();
    问题：这段代码运行的结果是什么呢？答案是：undefined
