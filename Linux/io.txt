|BufferIO
    缓存I/O又被称作标准I/O，大多数文件系统的默认I/O操作都是缓存I/O。操作系统会将 I/O 的数据缓存在文件系统的页缓存（ page cache ）中，也就是说，数据会先被拷贝到操作系统'内核缓冲区'中，然后才会从操作系统内核缓冲区拷贝到应用程序的地址空间

    读操作：操作系统检查内核的缓冲区有没有需要的数据，如果已经缓存了，那么就直接从缓存中返回；否则从磁盘中读取，然后缓存在操作系统的缓存中。

    写操作：将数据从用户空间复制到内核空间的缓存中。这时对用户程序来说写操作就已经完成，至于什么时候再写到磁盘中由操作系统决定，除非显示地调用了sync同步命令（详情参考《【珍藏】linux 同步IO: sync、fsync与fdatasync》）。

    缓存I/O的优点：1）在一定程度上分离了内核空间和用户空间，保护系统本身的运行安全；2）可以减少读盘的次数，从而提高性能。

    缓存I/O的缺点：在缓存 I/O 机制中，DMA 方式可以将数据直接从磁盘读到页缓存中，或者将数据从页缓存直接写回到磁盘上，而不能直接在应用程序地址空间和磁盘之间进行数据传输，这样，数据在传输过程中需要在应用程序地址空间（用户空间）和缓存（内核空间）之间进行'多次数据拷贝'操作，这些数据拷贝操作所带来的CPU以及内存开销是非常大的

|DirectIO -> 使得磁盘IO（或者DMA）直接将数据存入用户空间的buffer
    直接IO就是'应用程序直接访问磁盘'数据，而'不经过内核缓冲区'，这样做的目的是'减少一次从内核缓冲区到用户程序缓存的数据复制'。比如说'数据库管理系统'这类应用，它们更倾向于选择它们'自己的缓存机制'，因为数据库管理系统往往比操作系统更了解数据库中存放的数据，数据库管理系统可以提供一种更加有效的缓存机制来提高数据库中数据的存取性能。
    DirectIO使用场景：'DirectIO要读取大文件'，因为每次都要初始化DMA；如果是读取小文件，初始化DMA花费的时间比系统读小文件的时间还长，所以小文件使用directIO没有优势。对于大文件也只是在只读一次，并且后续没有其他应用再次读取此文件的时候，才能有优势，如果后续还有其他应用需要使用，这个时候DirectIO也没有优势。

    direct实际上有几方面的优势，'不使用系统缓存'一方面，另一方面是使用dma直接由dma控制从内存输入到用户空间的buffer中不经过cpu做mov操作，'不消耗cpu'

    直接IO的缺点：如果访问的数据不在应用程序缓存中，那么每次数据都会直接从磁盘加载，这种直接加载会非常缓存。通常'直接IO与异步IO结合使用'，会得到比较好的性能。（异步IO：当访问数据的线程发出请求之后，线程会接着去处理其他事，而不是阻塞等待）
