|分支常用名
    |开发分支 -> dev
    |bug分支 -> hotfix

git br -r                 #查看所有远程分支
git br -a                 #查看所有本地和远程分支
git br <new_branch>       #创建新的分支
git br -v                 #查看各个分支最后提交信息
git br --merged           #查看已经被合并到当前分支的分支
git br --no-merged        #查看尚未被合并到当前分支的分支
git br -d <branch>        #删除某个分支
git br -D <branch>        #强制删除某个分支 (未被合并的分支被删除的时候需要强制)
git br -m <new-br-name>   #重命名本地分支

git checkout <branch>     #切换到某个分支
git checkout -b <new_br> #创建新的分支，并切换过去
git checkout -b <new_br> <branch>  #基于branch创建新的new_br，并切换过去
git checkout $id          #checkout出某次提交,但无分支信息,切换到其他分支会自动删除
git checkout $id -b <new_branch>  #checkout出某次提交并新建一个分支

git pull <远程主机名> <远程分支名>[:<本地分支名>]
git pull                        #抓取远程仓库所有分支更新并合并到本地
git pull --no-ff                #抓取远程仓库所有分支更新并合并到本地,不要快进合并
git checkout --track origin/br  #跟踪某个远程分支创建相应的本地分支
git checkout –b br origin/br    #根据远程分支建立本地分支

git push [-f] <远程主机名> <本地分支名>[:<远程分支名>] #将本地推到远程(-f为强制执行)
                                #-f等于--force
git push                        #push所有分支
git push origin <br>[:<remote_br>] #创建本地分支到远程.不跟踪(upstream)
git push origin :<remote_br>    #直接删除远程分支
git push origin --delete <remote-br> #直接删除远程分支
git push --set-upstream|-u origin <br> #将本地分支首次推到远程,如无则创建并跟踪(add upstream br->origin/br)

git fetch [origin master]        #抓取远程仓库更新，但不会合并到本地
git fetch origin master:dev      #基于远程master分支新建本地分支dev,不会切换到dev
git merge origin/master          #将远程主分支合并到本地当前分支,本地自动生成新提交
git merge <branch>               #将branch分支合并到当前分支(快进当前分支到branch)
git merge origin/master --no-ff  #不要Fast-Foward合并，这样可以生成merge提交
git merge --abort                #放弃当前修改

-> rebase和merge合并得到的结果没有任何区别，但是rebase能产生一个'更整洁有序'的提交历史
git rebase master <branch>       #等于: git checkout br && git rebase master
(rebase后)git co master&&git merge br #快进到br的最新commit
git checkout br && git rebase master && git checkout master && git merge br
    #把branch分支里的每个提交(commit)取消掉，并且把它们临时保存为补丁(patch)(放到.git/rebase目录中),然后把branch分支更新为最新的master分支，再把保存的补丁应用到branch分支上.最后快进master到branch的最新commit
git rebase -i [origin/master]    #合并多个commit为一个(pick a commit,squash else:'s'), 默认为合并当前分支commits
git rebase -i HEAD~2             #合并前两个commit
                                 #不会生成新的commit
