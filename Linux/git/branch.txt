|分支命名规范(必须为单数)
    |主分支 -> master. 提供给用户使用的正式版本，只用来发布重大版本
    |集成分支(开发分支)
        |版本内集成分支 -> feature/versions/{$version_id}
        |所有功能的集成分支 -> develop。永远是功能最新最全的分支
    |功能分支 -> feature
        |版本功能分支 -> 根据版本需求分出来的功能分支
            feature/{$version_id}/{issue_id}_{$desc}
                -> issue_id为JIRA问题id，desc为问题描述，如remove_post
        |非版本功能分支 -> 不跟版本一起上线的功能或一些不紧急的bug
            feature/{$user}/{$issue_id}_{$desc}
    |发布分支 -> release。从开发分支fork出来，用来整理提交，完整测试和发布定期要上线的功能
    |bug修复分支 -> hotfix. 需紧急修复的线上bug分支，不紧急的bug归为功能分支
        hotfix/{$user}/{$issue_id}_{$desc}
    -> 发布分支和hotfix分支开发完成后须同时合并到master和开发分支，保证二者提交历史一致

git br                    #查看所有本地分支
git br -r                 #查看所有远程分支
git br -a                 #查看所有本地和远程分支
git br <new_branch>       #创建新的分支
git br -v                 #查看各个分支最后提交信息
git br --merged           #查看已经被合并到当前分支的分支
git br --no-merged        #查看尚未被合并到当前分支的分支
git br -d <branch>        #删除某个分支
git br -D <branch>        #强制删除某个分支 (未被合并的分支被删除的时候需要强制)
git br -m old new         #重命名本地分支

git checkout <branch>     #切换到某个分支
git checkout -b <new_br> #创建新的分支，并切换过去
git checkout -b <new_br> <branch>  #基于branch创建新的new_br，并切换过去
git checkout $id          #checkout出某次提交,但无分支信息,切换到其他分支会自动删除
git checkout $id -b <new_branch>  #checkout出某次提交并新建一个分支

|git pull原理
    |fetch -> 先把远程提交下载到本地repo，再基于本地最后一次push新建一个临时分支，将新下载的提交patch到新分支末尾
    |merge -> 将新建的临时分支和本地工作分支进行合并，将所有提交串联起来
git pull <远程主机名> <远程分支名>[:<本地分支名>]
git pull                        #抓取远程仓库所有分支更新并合并到本地
git pull --no-ff                #抓取远程仓库所有分支更新并合并到本地,不要快进合并
git checkout --track origin/br  #跟踪某个远程分支创建相应的本地分支
git checkout –b br origin/br    #根据远程分支建立本地分支
git pull = git fetch + git merge
git pull --rebase = git fetch + git rebase

git push [-f] <远程主机名> <本地分支名>[:<远程分支名>] #推到远程(-f为强制执行=--force)
                                #-f等于--force
git push                        #push所有分支
git push origin <br>[:<remote_br>] #创建本地分支到远程.不跟踪(upstream)
git push origin :<remote_br>    #直接删除远程分支
git push origin --delete <remote-br> #直接删除远程分支
git push --set-upstream|-u origin <br> #将本地分支首次推到远程,如无则创建并跟踪(add upstream br->origin/br)

git fetch [origin master]       #下载远程仓库更新，但不会合并到本地
git fetch origin [master]:dev   #基于远程master分支新建本地分支dev,不会切换到dev
git merge origin master         #将远程主分支合并到本地当前分支,本地自动生成新提交
git merge <branch>              #将branch分支合并到当前分支(快进当前分支到branch)
git merge origin master --no-ff #不要Fast-Foward合并，这样可以生成merge提交
git merge --abort               #放弃当前修改
|适用场景 -> 需要保留项目完整历史的公共分支合并
|merge三种模式
    1.快进(fast forward，默认)，head指针移动到被merge分支的最新提交，不生成新的merge提交
    2.非快进(--no-ff)，不需要快进，生成新的merge提交
    3.压缩(--squash)，将被merge分支的提交压缩成一个提交，添加到主分支，没有额外merge提交
git mergetool                    #可视化合并过程，并引导用户解决冲突

git rebase master <branch>       #等于: git checkout br && git rebase master
(rebase后)git co master&&git merge br #快进到br的最新commit
git checkout br && git rebase master && git checkout master && git merge br
    #把branch分支里的每个提交(commit)取消掉，并且把它们临时保存为补丁(patch)(放到.git/rebase目录中),然后把branch分支更新为最新的master分支，再把保存的补丁应用到branch分支上.最后快进master到branch的最新commit
git rebase -i [origin/master]    #合并多个commit为一个(pick a commit,squash else:'s'), 默认为合并当前分支commits
git rebase -i HEAD~2             #合并前两个commit
                                 #不会生成新的commit
|交互式rebase操作
    1.pick -> 正常选中
    2.reword[r] -> 选中并且修改提交信息
    3.edit[e] -> 选中，rebase时会暂停，允许修改这个commit
    4.squash[s] -> 选中，会将当前commit与上一个commit合并，被合并到的commit信息会包含全部被合并的相关信息
    5.fixup[f] -> 与squash相同(合并)，但不会保存当前commit的提交信息，相关提交信息会被注释掉
    6.exec[e] -> 执行其他shell命令
    -> fixup和squash还可以当做命令行参数使用，自动合并commit
        git commit --fixup
        git rebase -i --autosquash
    -> rebase合并提交以后，分支历史改变了，跟远程分支不一定兼容，有可能需要强制推送--force
 -> rebase和merge合并得到的结果没有任何区别，但是rebase能产生一个'更整洁有序'的提交历史
|适用场景 -> '个人私有分支'本地提交历史清理，交互式rebase只影响本地分支，外部只能看到结果
|rebase黄金法则 -> 永远不要在'公共分支'上使用。重写公共历史会对协作工作流带来灾难性影响

|另一种合并commit的简便方法
    git reset HEAD~5
    git add .
    git commit -am "Combine last 5 commits"
    git push --force
