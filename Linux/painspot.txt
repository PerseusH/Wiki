|僵尸进程 -> 进程已经死亡，但没有释放系统资源，包括内存和一些一些系统表等，如果大量的产生僵死进程，将因为没有可用的进程号而导致系统'不能产生新的进程', 耗尽进程资源. 状态为Z
    -> 由于子进程的结束和父进程的运行是一个异步过程，即父进程永远无法预测子进程 到底什么时候结束. 那么会不会因为父进程太忙来不及wait子进程，或者说不知道 子进程什么时候结束，而丢失子进程结束时的状态信息呢? 不会。因为UNⅨ提供了一种机制可以保证只要父进程想知道子进程结束时的状态信息， 就可以得到。这种机制就是： 在每个进程退出的时候，内核释放该进程所有的资源，包括打开的文件，占用的内存等。但是仍然为其保留一定的信息（包括进程号the process ID，退出状态the termination status of the process，运行时间the amount of CPU time taken by the process等）。直到父进程通过wait/waitpid来取时才释放. 这样就导致了问题，如果'父进程不调用wait/waitpid'，那么保留的那段信息就不会释放,其'进程号就会一直被占用'.产生原因一般是'父进程阻塞休眠无法调用wait/waitpid'

    |清除ZOMBIE进程的方法
        1.kill –18 PPID (PPID是父进程) #这个信号是告诉父进程,该子进程已死亡,请收回资源
        2.如果不行则看能否终止其父进程（如果其父进程不需要的话）。先看其父进程又无其他子进程，如果有，可能需要先kill其他子进程，也就是兄弟进程。方法是：
        kill –15 PID1 PID2(PID1,PID2是僵尸进程的父进程的其它子进程)
        然后再kill父进程：kill –15 PPID  这样僵尸进程就可能被完全杀掉了

    |僵尸进程的避免
        1.父进程通过wait和waitpid等函数等待子进程结束，这会导致父进程挂起
        2.如果父进程很忙，那么可以用signal函数为SIGCHLD安装handler，因为子进程结束后， 父进程会收到该信号，可以在handler中调用wait回收
        3.如果父进程不关心子进程什么时候结束，那么可以用signal（SIGCHLD,SIG_IGN） 通知内核，自己对子进程的结束不感兴趣，那么子进程结束后，内核会回收， 并不再给父进程发送信号
        4.还有一些技巧，就是fork两次，父进程fork一个子进程，然后继续工作，子进程fork一 个孙进程后退出，那么孙进程被init接管，孙进程结束后，init会回收。不过子进程的回收 还要自己做

|Disk sleep进程 -> 因为阻塞IO处于无法中断的休眠状态的进程. 状态为D
    |清楚D进程的方法
        1.尽快处理完成阻塞的IO任务
        2.用kill -9命令是不管用的，最简单的方法就是reboot重启系统
        3.修改内核(C语言)，将其进程状态转化为别的状态，然后kill掉
            #include <linux/init.h>
            #include <linux/kernel.h> /*Needed by all modules*/
            #include <linux/module.h>
            #include <linux/sched.h> //for_each_process
            MODULE_LICENSE("BSD");
            static int pid = -1;
            module_param(pid, int, S_IRUGO);
            static int killd_init(void)
            {
                struct task_struct * p;
                printk(KERN_ALERT "killd: force D status process to death/n");
                printk(KERN_ALERT "killd: pid=%d/n", pid);
                for_each_process(p){
                    if(p->pid == pid){
                        printk("killd: found/n");
                        set_task_state(p, TASK_STOPPED);
                        printk(KERN_ALERT "killd: aha, dead already/n");
                        return 0;
                    }
                }
                printk("not found");
                return 0;
            }
            static void killd_exit(void)
            {
                printk(KERN_ALERT "killd: bye/n");
            }
            module_init(killd_init);
            module_exit(killd_exit);

            -> 然后新建Makefile文件：
                obj-m := killd.o
                all :
                    $(MAKE) -C /lib/modules/$(shell uname -r)/build M=$(PWD) modules
                clean:
                    $(MAKE) -C /lib/modules/$(shell uname -r)/build M=$(PWD) clean

            -> 然后执行make命令进行编译: make
            -> 插入模块的时候提供D状态的进程号，就可以将其转换为t状态，使用普通kill就可以杀死
                insmod ./killd.ko pid=1234
            -> 卸载模块: rmmod killd
