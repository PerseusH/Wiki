-> 计算机硬件能够直接执行的语言

\数的表示
	|补码
	-> 补码的表示 -> 正数为其本身; 负数取反加一
	-> 能表示的最大整数 -> 01111... = 2 ** n - 1
	-> 能表示的最小整数 -> 10000... = -(2 ** n)

	|浮点数
	-> 浮点数加减运算
	-> 对阶操作是否会阶码上溢或下溢
	-> 右规和尾数舍入是否会阶码上溢
	-> 左规是否会阶码下溢
	-> 尾数溢出时结果是否一定溢出
	-> IEEE754浮点数
		1.第一位数符
		2.阶码加偏移
		3.隐藏整数位1

	-> 机器中float型数据的比较,十六进制的float型数据比较
	-> C语言的数据在内存中是补码形式
	-> C语言中short(16位)转int(32位)高位加0
	-> C语言中int转float/double值不变, float/double转int精度缺失

-> 字符的前缀编码

-> CPU单总线结构

\CPU
	-> 哪些寄存器是程序员可见的?
	-> 为何要设置暂存器？

	|cpu计算时间的计算公式
	-> cpu时间=指令数目(IC)*(平均每条指令的平均时钟周期个数cpi)*周期长度=ic*cpi/(频率)

	-> 采用中断I/O方式控制打印输出
	-> 内部异常(内中断)(故障(fault)、陷阱(trap)和终止(abort))
	-> 是否和当前执行指令相关
	-> 是否由CPU内部逻辑实现检测
	-> 响应是否发生在指令执行过程中
	-> 处理完是否返回到发生异常的指令继续执行

	-> 'CPU和打印控制接口中的I/O端口之间交换的信息是什么?'
		1.打印字符
		2.主存地址
		3.设备状态
		4.控制命令

	-> '处理外部中断时，应该由操作系统保存的是'
		1.程序计数器(PC)的内容
		2.通用寄存器的内容
		3.块表(TLB)的内容
		4.Cache中的内容

\存储器
	-> 主存地址位数
	-> 主存和Cache之间的映射
	-> 主存块大小
	-> 采用回写（Write Back）/直写（Write Through）方式
	-> 页式虚拟存储管理方式,TLB,内存页置换
	-> Cache总容量位数
	-> 存储器
	-> 编址

	|RAM -> 随机存储器. 内存(主存). 由地址译码器、存储矩阵和读写控制电路三部分组成
		-> 存储单元的内容可按需随意取出或存入，且存取的速度与存储单元的位置无关的存储器。这种存储器在断电时将丢失其存储内容，故主要用于存储短时间使用的程序
	|ROM -> 只读存储器. 固化存储器(一次写入，反复读取), 一般是装入整机前事先写好的，整机工作过程中只能读取, 不能改写. 相较RAM, ROM的存取速度很低
		-> ROM所存数据稳定，断电后所存数据也不会改变；其结构较简单，读出较方便，因而常用于存储各种固定程序和数据. 如计算机启动用的BIOS芯片. 由于不能改写信息，不能升级，现已很少使用

	|缓存
		1.高速缓存Cache -> 存在于CPU和内存之间,静态RAM,用来解决CPU与内存之间速度不匹配的问题
			-> 读写速度很快，几乎与CPU一样。由于CPU的运算速度太快，内存的数据存取速度无法跟上CPU的速度，所以在cpu与内存间设置了cache为cpu的数据快取区
			-> 当计算机执行程序时，数据与地址管理部件会预测可能要用到的数据和指令，并将这些数据和指令预先从内存中读出送到Cache。一旦需要时，先检查Cache，若有就从Cache中读取，若无再访问内存，现在的CPU还有一级cache，二级cache
		2.磁盘缓存 -> 内存存储
		3.浏览器缓存 -> 磁盘存储

	-> '在工作期间需要周期性刷新的是'
		1.SRAM
		2.SDRAM
		3.ROM
		4.FLASH

	-> '4体交叉存储器, 存储器总线主存地址（十进制）序列为8005，8006，8007，8008，8001，8002，8003，8004，8000, 可能发生缓存冲突的地址对是'
		1.8004、8008
		2.8002、8007
		3.8001、8008
		4.8000、8004
