-> 计算机硬件能够直接执行的语言
-> 机器字长与主存储器字长通常是相同的，但也可以不同。不同的情况下，一般是主存储器字长小于机器字长，例如机器字长是32位，主存储器字长可以是32位，也可以是16位，当然，两者都会影响CPU的工作效率

- 原码中有两个0:00,10，补码中只有一个0:00，由于计算机可表示的数值总数没有变，另一个负0(10)被**让给了补码负数**，使得可表示的最小负数加一(1111...1+1=>-(2^(n-1)-1+1)=>-2^(n-1)=>1000...0)

\数的表示
	|补码
	-> 补码的表示 -> 正数为其本身; 负数**取反加一**
	-> 能表示的最大整数 -> 0111...1 = 2^n - 1
	-> 能表示的最小整数 -> 1111...1 = -(2^n-1)

|浮点数
-> 浮点数加减运算
-> 对阶操作是否会阶码上溢或下溢
-> 右规和尾数舍入是否会阶码上溢
-> 左规是否会阶码下溢
-> 尾数溢出时结果是否一定溢出
-> IEEE754浮点数
	1.第一位数符
	2.阶码加偏移
	3.隐藏整数位1

-> 机器中float型数据的比较,十六进制的float型数据比较
-> C语言的数据在内存中是补码形式
-> C语言中short(16位)转int(32位)高位加0
-> C语言中int转float/double值不变, float/double转int精度缺失

-> 字符的前缀编码

-> CPU单总线结构

\CPU
	|机器字长 -> CPU进行一次整数运算所能处理的二进制数据的位数（整数运算即定点整数运算）。因为计算机中数的表示有定点数和浮点数之分，定点数又有定点整数和定点小数之分，这里所说的整数运算即定点整数运算。机器字长也就是运算器进行定点数运算的字长，通常也是CPU内部数据通道的宽度

-> 哪些寄存器是程序员可见的?
-> 为何要设置暂存器？

|cpu计算时间的计算公式
-> cpu时间=指令数目(IC)*(平均每条指令的平均时钟周期个数cpi)*周期长度=ic*cpi/(频率)

-> 采用中断I/O方式控制打印输出
-> 内部异常(内中断)(故障(fault)、陷阱(trap)和终止(abort))
-> 是否和当前执行指令相关
-> 是否由CPU内部逻辑实现检测
-> 响应是否发生在指令执行过程中
-> 处理完是否返回到发生异常的指令继续执行

-> 'CPU和打印控制接口中的I/O端口之间交换的信息是什么?'
	1.打印字符
	2.主存地址
	3.设备状态
	4.控制命令

-> '处理外部中断时，应该由操作系统保存的是'
	1.程序计数器(PC)的内容
	2.通用寄存器的内容
	3.块表(TLB)的内容
	4.Cache中的内容

\存储器
	-> (2**主存地址线位数)为存储器存储单元数目, 主存数据线位数为存储字长(存储数据的位数)
	-> 存储容量 = 存储单元数目 * 存储字长
	-> 主存和Cache之间的映射
	-> 采用回写（Write Back）/直写（Write Through）方式
	-> Cache总容量位数
	-> 编址

-> MAR: 地址寄存器, 使用地址总线对内存寻址, MDR: 数据寄存器, 使用数据总线读写内存地址单元

|RAM -> 随机存储器. 内存(主存). 由地址译码器、存储矩阵和读写控制电路三部分组成
	-> 存储单元的内容可按需随意取出或存入，且存取的速度与存储单元的位置无关的存储器。这种存储器在断电时将丢失其存储内容，故主要用于存储短时间使用的程序
	|随机存取 -> 读写速度与存储单元位置无关。顺序存储器的读写速度与存储单元位置有关
	|SRAM -> 静态RAM. 读写速度高于DRAM, 通常用作Cache
	|DRAM -> 动态RAM. 行地址和列地址分两次传输,地址引脚相对SRAM减少了一半,需要周期性刷新
	|SDRAM -> 利用同步于系统的时钟信号和锁存器实现同步读写的动态RAM. CPU不必等待RAM
|ROM -> 只读存储器. 固化存储器(一次写入，反复读取), 一般是装入整机前事先写好的，整机工作过程中只能读取, 不能改写. 相较RAM, ROM的存取速度很低
	-> ROM所存数据稳定，断电后所存数据也不会改变；其结构较简单，读出较方便，因而常用于存储各种固定程序和数据. 如计算机启动用的BIOS芯片. 由于不能改写信息，不能升级，现已很少使用
	-> PROM只能修改一次, EPROM可以任意次修改
|半顺序存储器
	-> 磁盘存储器对数据的访问，在不同柱面和磁头上是随机选择的，但在一个扇区内部是进行顺序读写的，所以磁盘属于一种半顺序存储器, 光盘(CDROM)同

|内存原理 -> 由存储芯片组成芯片矩阵(根据地址线数分组, 根据存储字长分列), 对芯片矩阵进行组编码(将对外的地址分段映射到对应的芯片分组). 存储芯片内部有存储单元矩阵, 对应每一个物理地址

|缓存
	1.高速缓存Cache -> 存在于CPU和内存之间,静态RAM,用来解决CPU与内存之间速度不匹配的问题
		-> 读写速度很快，几乎与CPU一样。由于CPU的运算速度太快，内存的数据存取速度无法跟上CPU的速度，所以在cpu与内存间设置了cache为cpu的数据快取区
		-> 当计算机执行程序时，数据与地址管理部件会预测可能要用到的数据和指令，并将这些数据和指令预先从内存中读出送到Cache。一旦需要时，先检查Cache，若有就从Cache中读取，若无再访问内存，现在的CPU还有一级cache，二级cache
	2.磁盘缓存 -> 内存存储
	3.浏览器缓存 -> 磁盘存储

-> '在工作期间需要周期性刷新的是'
	1.SRAM
	2.SDRAM
	3.ROM
	4.FLASH

-> '4体交叉存储器, 存储器总线主存地址（十进制）序列为8005，8006，8007，8008，8001，8002，8003，8004，8000, 可能发生缓存冲突的地址对是'
	1.8004、8008
	2.8002、8007
	3.8001、8008
	4.8000、8004