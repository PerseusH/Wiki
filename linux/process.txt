working process | master #主进程
-> linux系统调用fork()创建子进程，进程间的关系是一棵树，树的根就是PID为1的init进程

|Linux malloc内存分配
    1.malloc分配内存是先在虚拟内存中分配地址的，到实际使用时才真正的映射到物理内存
    2.到了真正要映射物理内存时，首先分配物理内存，此时top的res增加
    3.如果物理内存不够用了，分配swap，此时性能很差，此时top的res增加

|前后台调度
    Ctrl+z #挂起当前进程
    jobs #查看后台任务列表，
    fg #将后台任务恢复到前台运行
    bg #激活后台被挂起的任务

cat /proc/$pid/stack #查看内核调用栈信息，只有内核编译时打开CONFIG_STACKTRACE编译选项，才会生成这个文件

cat /proc/$pid/status #查看进程状态

/proc/$pid/task #进程包含的**线程**，子目录名是线程的ID

/proc/$pid/fd/ #这个目录包含了进程打开的每一个文件的信息, 实际上是指向真正的文件的符号连接，数字代表文件描述符

/proc/$pid/limits #该文件存储了进程的软限制，硬限制等信息。可以查看该进程允许打开的最大描述字个数

/proc/[pid]/syscall 显示当前进程正在执行的系统调用。举例如下：

​	$ cat /proc/2406/syscall 202 0xab3730 0x0 0x0 0x0 0x0 0x0 0x7ffff7f6ec68 0x455bb3

​	第一个值是系统调用号（202代表poll），后面跟着 6 个系统调用的参数值（位于寄存器中），最后两个值依次是堆栈指针和指令计数器的值。如果当前进程虽然阻塞，但阻塞函数并不是系统调用，则系统调用号的值为 -1，后面只有堆栈指针和指令计数器的值。如果进程没有阻塞，则这个文件只有一个 running 的字符串

/proc/[pid]/wchan 显示当进程**睡眠或等待**时，kernel当前运行的函数

|strace -> 追踪进程的系统调用(mac下用dtruss)
    strace -p 15427 #简单追踪进程正在做什么
    Process 15427 attached - interrupt to quit
    futex(0x402f4900, FUTEX_WAIT, 2, NULL #在调用futex()的时候阻塞(挂起)卡死了
    Process 15427 detached

​	sudo strace -T -tt -e trace=all -p 11124 #查看该进程正在持续的状态
​	Process 11124 attached - interrupt to quit
​	15:33:07.259044 read(9,

|iostat -> iostat -x 1 #查看磁盘IO情况. 总IO(io)/s = r/s(读) +w/s(写)
    -> r/s | w/s | svctm | util% 居高不下, 说明带宽占用率极高，遇到了瓶颈
    -> 重点指标是svctm和util这两列
        |svctm -> 平均每次IO操作的服务时间 (毫秒)
        |util% -> 每秒IO操作的发生率，或者说每秒有多少时间IO队列是非空的

|iotop -> 查看IO负载主要落在了哪个进程上

|pt-ioprofile -> sudo pt-ioprofile -p pid [-c sizes|--cell=sizes] #提供量化的数据描述了进程io的真实读写量
    -> 原理是对某个pid附加一个strace进程进行IO分析
    Tracing process ID 8534
    total   read    pwrite  fsync  close filename
    613878  613878   0      0      0     /.../sv_diff.frm
    406924  406924   0      0      0     /.../sv_sample.frm
    18432   0       18432   0      0     /.../ib_logfile1
    3029    3029     0      0      0     /.../custom_query_view.frm

|IO定位 -> 先用top|ps -ef -o stat|ps aux 查看STAT列(值为D则表示有阻塞IO), 再用iostat查看磁盘IO情况, 再用iotop定位高IO进程, 最后用pt-ioprofile定位具体文件
    -> 常用来定位mysql进程IO
    $ cat /proc/pid/io #获取进程的io信息
    $ cat /proc/pid/stat #查看进程的详细状态信息

|pstack
    pstack pid #查看进程函数堆栈。尽管`pstack`并不能查看内核态信息，它仍然能够告诉我们是哪个系统调用被执行了（通常，有一个相应的libc库调用显示在用户态堆栈的顶端上）

|pstree -> 以树状图显示进程间的关系
    pstree #以树状图显示进程，只显示进程的名字，且相同进程合并显示
    pstree -p #以树状图显示进程，还显示进程PID
    pstree -p <pid> #以树状图显示进程PID为<pid>的进程以及子孙进程，如果有-p参数则同时显示每个进程的PID
    pstree -a #以树状图显示进程，相同名称的进程不合并显示，并且会显示命令行参数，如果有-p参数则同时显示每个进程的PID

|top -> 日常管理工作中最重要的Linux系统监控工具之一, 可以动态观察系统进程状况方便系统管理员实时了解系统资源现状. 监控的最小单位是进程
    -> -i #显示空闲的进程
    -> -p #监控指定的进程,当监控多个进程时,进程ID以逗号分隔,这个选项只能在命令行下使用
    -> -u/U #监控指定用户相关进程
    -> -c #显示执行任务的命令行
    -> top界面里输入b和x, 再输入shift+’>’或’<‘就可以按照某列排序

|stat->S:Sleeping; R:Running; D:Disk Sleeping; T:Stop; s:有子进程; +:位于后台

$ top
#进程状态, 线程数. zombie(卡死的僵尸进程)
Processes: 275 total, 2 running, 273 sleeping, 1483 threads    06:24:28
#平均负载, CPU状态. user(用户态), sys(内核态), idle(空闲CPU)
Load Avg: 1.34, 1.55, 1.55  CPU usage: 0.71% user, 1.18% sys, 98.9% idle
SharedLibs: 89M resident, 44M data, 31M linkedit. MemRegions: 123086 total, 946M resident, 31M private, 269M shared.
#内存使用情况
PhysMem: 4033M used (1398M wired), 62M unused.
VM: 1252G vsize, 1100M framework vsize, 14564471(0) swapins, 15571181(0) swapouts.
#网络使用情况
Networks: packets: 41959091/48G in, 22745049/2603M out. Disks: 26247414/322G read, 28232872/318G written.
Stat: 该进程的状态。其中S代表休眠状态；D代表由于阻塞IO造成的不可中断的休眠；R代表运行状态；Z代表僵尸状态；T代表停止或跟踪状态

PID    COMMAND      %CPU TIME     #TH   #WQ  #PORT MEM    PURG   CMPRS  PGRP  PPID  STATE    BOOSTS            %CPU_ME
91947  top          4.0  00:00.61 1/1   0    23    2452K+ 0B     0B     91947 51072 running  *0[1]             0.00000
91930  quicklookd   0.0  00:00.13 4     1    76    3372K  28K    0B     91930 1     sleeping  0[0]             0.00000
91786  mdworker     0.0  00:00.11 3     1    48    1912K  0B     1356K  91786 1     sleeping *0[1]             0.00000

|ps -> 查看当前正在运行的进程
    -> Stat: 该进程的状态。其中S代表休眠状态；D代表由于**阻塞IO**造成的不可中断的休眠；R代表运行状态；Z代表僵尸状态；T代表停止或跟踪状态
    |ps -l #查看进程的优先级
        -> niceness值(NI)
        -> PRI表示进程当前的总优先级,值越小表示优先级越高,由进程默认的PRI加上NI得到,即PRI(new) = PRI(old) + NI

|ps [aux|-ef|-aef]|grep xxx #查看进程是否存在xxx进程
    |aux 用BSD格式显示
    -> 显示项:USER, PID, %CPU, %MEM, VSZ, RSS, TTY, STAT, START, TIME, COMMAND
    |-ef/-aef 用标准格式显示
    -> 显示项:UID, PID, PPID, C, STIME, TTY, TIME, CMD

$ ps -ef -o stat #指定显示项

|thread
    ps -T -p <pid> #查看某进程下的线程
    ps -eLf | grep java | wc -l #监控java线程数
    ls /proc/PID/task | wc -l #监控PID对应的线程数

|pmap
    pmap -x <pid> #查看进程占用的堆内存大小
    pmap <pid> #输出进程内存的状况，可以用来分析线程堆栈

|awk
    |awk [-F 'seperator'] '/pattern/{action}' <file>
    ps -ef|grep xxx|grep -v grep|awk '{print "kill -9 " $2}' |sh #批量删除含xxx进程
    -> "ps -ef"是linux里查看所有进程的命令.这时检索出的进程将作为下一条命令"grep xxx"的输入
    -> "grep xxx"是获取所有含有关键字"xxx"的进程
    -> "grep -v grep"是在前句的结果中排除含有关键字"grep"的进程
    -> "awk '{print "kill -9 " $2}'"是根据搜索结果批量打印出"kill -9 nnn"指令
    -> "print"是打印指令,"kill -9"会强行杀掉指定进程,"$2"就是"ps -ef"结果的第二列显示的PID
    -> "|sh"是执行awk打印的"kill -9 nnn"命令

file xxx.txt|awk -F ':' '{cmd="rm "$1;system(cmd)}' #执行"rm xxx.txt"命令

cat /etc/passwd|awk -F ':' '{print $1}'
-> 等于"awk -F ':' '{print $1}' /etc/passwd"
-> "cat /etc/passwd"获取文件内容给awk
-> "-F ':'"为以":"分割文件内容的每行文本为两部分,"-F ':'"为域分隔符,"$1"为取每行第一部分,"$0"为取整条记录
-> 在不指明"-F"域分隔符的情况下，默认的域分隔符是"空格"
-> 适用于
1."ps -ef|grep xxx"
2."ls -l"
3."awk '{}' <file>"
4."cat <file>"
5."ifconfig"
6."find dir -name xxx"

awk [-F:] '/xxx/{action}' #正则获取包含"xxx"的结果,action为空则默认全部输出

|ulimit
    ulimit -a #显示当前的各种用户进程限制
    ulimit -u 20480 #设置系统可以运行的最大并发进程数
        -c #设置core文件的最大值.单位:blocks
        -d #设置一个进程的数据段的最大值.单位:kbytes
        -f #Shell 创建文件的文件大小的最大值，单位：blocks
        -h #指定设置某个给定资源的硬极限。如果用户拥有 root 用户权限，可以增大硬极限。任何用户均可减少硬极限
        -l #可以锁住的物理内存的最大值
        -m #可以使用的常驻内存的最大值,单位：kbytes
        -n #每个进程可以同时打开的最大文件数，默认值是 1024
        -p #设置管道的最大值，单位为block，1block=512bytes
        -s #指定堆栈的最大值：单位：kbytes
        -S #指定为给定的资源设置软极限。软极限可增大到硬极限的值。如果 -H 和 -S 标志均未指定，极限适用于以上二者
        -t #指定每个进程所使用的秒数,单位：seconds
        -u #可以运行的-*- 最大并发进程数 -*-
        -v #Shell可使用的最大的虚拟内存，单位：kbytes
    ulimit -d unlimited #数据段长度无限制
    ulimit -m unlimited #最大内存大小无限制
    ulimit -s unlimited #堆栈大小无限制
    ulimit -t unlimited #CPU时间无限制
    ulimit -v unlimited #虚拟内存无限制

|定时任务
    |Cron -> 定时任务服务
        /user/sbin/cron start | stop | restart | reload | status

|Crontab -> 定时任务管理器
    -> echo '*/1 * * * * /bin/date >> date.txt' > date.cron #crontab脚本
        -> min hour day-of-month month-of-year day-of-week cmds #命令格式
        -> *代表所有的取值范围内的数字，"/"代表每的意思,"/5"表示每5个单位，"-"代表从某个数字到某个数字,","分开几个离散的数字
    crontab xxx.cron #启动任务脚本
    crontab -l #查看定时任务是否成功
        crontab -r #删除当前任务