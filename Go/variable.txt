-> 变量是数据'内存地址的别名'
-> 支持动态初始化，编译器会自动推导变量类型
var m = map[string]string{"孔飞力": "叫魂", "唐诺": "世间的名字", "费孝通": "乡土中国"}
-> 已声明变量如果未被使用，'编译时会报错'

-> 如果声明变量时，没有显式初始化，则被'隐式初始化'为变量类型的零值
    |不同类型的零值
        数值          0
        字符串        ""
        布尔          false
        接口或引用类型  nil

-> 获取变量类型
    import (
        "reflect"
        "fmt"
    )
    1. s := reflect.TypeOf(v).String()
    2. s := fmt.Sprintf("%T", v) //fmt.Sprintf(...)里最终调用的还是reflect.TypeOf()

-> 字面量就是指这个量本身，比如字面量3也就是指3. 再比如"ABC"就是string类型的字面量

-> 不可变的值(immutable)'不可寻址'。常量、基本类型的值字面量、数组字面量、字符串变量值、map元素值、函数以及方法的字面量都是如此。这样规定有'安全方面'的考虑
    -> 绝大多数被视为'临时结果'的值都是不可寻址的。算术操作的结果值属于临时结果，针对值字面量的表达式结果值也属于临时结果。但'切片字面量的索引结果值'虽然也属于临时结果，但却是'可寻址'的
    -> 如果'把临时结果赋给一个变量'，那么它就是'可寻址'的了
    -> 若拿到的某值的指针可能会破坏程序的一致性，那么就是不安全的，该值就不可寻址。由于字典的内部机制，对字典的索引结果值的取值操作都是不安全的。另外，获取由字面量或标识符代表的函数或方法的地址也是不安全的
    var n *int = &123 // 报错：cannot take the address of 123。不可寻址的值不能使用指针

|多重赋值 i, j = j, i; a[i], a[j] = a[j], a[i]
|匿名变量 -> '_' 不占用命名空间，不会分配内存。匿名变量之间也不会因为多次声明而无法使用

|指针 -> 存储'所指变量内存地址'的特殊变量。pi == &obj, *pi == obj == *&obj, &pi != &obj
    -> 指针存在在目的就是为了和一个函数'共享变量'(引用传递)，从而让这个函数可以对这个共享变量进行读写，即使这个变量没有直接放置在这个函数的栈帧中
    -> 与 C 不同，'Go没有指针运算'
    -> 用指针是为了'共享'，在阅读代码的时候也应该把 & 操作符当做共享来看
        var pi *[type] //声明指针, 空指针初始值为nil

        //使用new声明指针并初始化
        x := new([x_type])
        *x = [value]

        *pi = x // * 在=左边，表示所值变量本身
        x = *pi or *pi++ // * 在=右边，表示取出所指变量'值'
    -> '引用传递'实质上是在被调用函数中'新建了一个指针'，来接收传递进来的参数地址

|传值 -> Go和C/C++一样，本质上都是值传递，不存在引用传递。值传递就是传入参数的值是函数外部传入值的拷贝。 如果想要使用引用传递，需要将传入的参数设置为指针类型, 使用时传入对象地址。如果传入的参数数据很大，建议使用指针类型，'减少内存拷贝'参数产生的占用

|作用域 -> go的'变量作用域'是'花括号'确定的，任一变量的作用域只在自身所处的花括号范围内
    -> Go语言的内置类型、内置函数、内置常量都是全局词法块，因此它们都是全局作用域的，例如int、len、true等，可以在整个程序直接使用；对于导入的包，例如temconv导入的fmt包，是文件词法块，因此只能在当前文件中访问fmt包，这里fmt是全文件范围的作用域
    -> 全局作用域只能使用pacakge,import,func,type,var,:=, 在全局作用域执行语句会报错
        syntax error: non-declaration statement outside function body

    |语法块 -> 包含在花括号内的一系列语句，例如函数体或者循环体。语法块内部声明的变量是无法被语法块外部代码访问的
        |词法块 -> 我们可以扩展局部语法块的概念，在某些场景下不需要花括号
            1.全局词法块，包含所有源代码
                -> 内置类型、内置函数、内置常量都是全局词法块，因此它们都是全局作用域的，例如int、len、true等，可以在整个程序直接使用
                -> 对于全局变量来说，'声明的顺序和调用无关'，所有一个全局变量声明时可以引用它自身也可以引用在它之后声明的包级变量，然而，如果一个变量或者常量在声明时引用了它自己，编译器会报错
                    func prt() {
                    	fmt.Println(p)
                    }
                    var p int = 1
            2.包词法块，包含整个package
            3.文件词法块，包含整个文件
            4.for、if、switch语句的词法块
            5.switch或select中的case分支的词法块
            6.语法块

    |变量覆盖(shadow) -> 如果:=声明与全局变量同名的新变量，全局变量会在函数内被覆盖; =赋值则是修改全局变量值
        -> 全局作用域 > if & for后面的初始化表达式 > 花括号内。这三层都会发生变量覆盖
        -> := 不是一个赋值操作符而是声明。如果误用了:=，编译不会报错，但是变量不会按预期工作
            x := 1
            println(x)      // 1
            {
                println(x)  // 1
                x := 2
                println(x)  // 2    // 新变量x的作用域只在'代码块内部','全局变量x值不变'
            }
            println(x)      // 1

        |变量覆盖诊断
            1.$ go tool vet -shadow main.go //但是官方的vet 不会报告全部被覆盖的变量
              main.go:9: declaration of "x" shadows declaration at main.go:5
            2.$ go get github.com/barakmich/go-nyet //会报告全部被覆盖的变量
              $ $GOPATH/bin/go-nyet main.go
              main.go:9:5:Shadowing variable `x`
              -> 这个包的运行方式有三种：目录/包/文件
                go-nyet ./...
                # or
                go-nyet subpackage
                # or
                go-nyet file.go

    -> if条件可以包含一条执行语句或初始化表达式，这个表达式中的变量是这个条件判断结构的局部变量
        //第一个if语句里声明的变量对第二个if语句是可见的
        if num := 1; num < 0 {
            fmt.Println(num, "is negative")
        } else {
            fmt.Println(num, "is positive or 0")
        }
        //如果不想在外部词法块声明变量，可以这么写('不推荐')
        if f, err := os.Open(fname); err != nil {
            return err
        } else {// f and err are visible here too
            f.ReadByte()
            f.Close()
        }

    -> 考虑下面的程序，开始时会获取当前的工作目录，保存在一个包级变量中。这个本来可以通过在main函数中调用os.Getwd来完成，但是用init函数将这块儿逻辑从主逻辑中分离是一个更好的选择，特别是因为获取目录的操作可能会是失败的，这个时候需要处理返回的错误。函数log.Fatalf会打印一条信息，然后调用os.Exit(1)终结程序：
        var cwd string
        // var cwd string = os.Getwd() // Getwd失败可能造成意外
        func init() {
            //cwd, err := os.Getwd() // compile error: unused: cwd
            var err error
            cwd, err = os.Getwd() //不要用:=, 不然会用局部变量覆盖全局变量
            if err != nil {
                log.Fatalf("os.Getwd failed: %v", err)
        }
