-> 复合类型，基于数组实现.包括'四部分'一个底层数组,一个指向该数组的指针,cap(),len()
-> 因为slice依赖其底层的array，修改slice本质是'修改array'，而array又是有大小限制，当超过slice的容量，即'数组越界'的时候，需要通过动态规划的方式创建一个新的数组块。把原有的'数据复制'到新数组，这个新的array则为slice'新的底层依赖'
-> Go 语言切片是对数组的抽象。Go 数组的长度不可改变，在特定场景中这样的集合就不太适用，Go中提供了一种灵活，功能强悍的内置类型切片("动态数组"),与数组相比切片的长度是不固定的，可以追加元素，在追加时可能使切片的容量增大。切片'适用于字符串'类型
-> Go语言的切片都是'原地操作'。不能对'不可寻址'的值进行切片,只能对数组变量,返回值或指针切片
-> 多个切片可'共享'一个底层数组
slice[startIndex:endIndex] //slice[startIndex] to slice[endIndex-1]
slice[:] //获取所有元素
slice[:endIndex] //从零开始
slice[startIndex:] //到len(slice)-1为止
slice = slice[0:0] //把切片的开始和结束位置都设为0时，'生成的切片为空'

|切片作为函数参数 -> 值传递。原切片会根据底层数组'新建一个切片传入函数', 二者'共享底层数组'
    -> 修改函数内切片元素值，原切片也相应改变
    -> 如果在函数内，append操作'超过了原切片的容量'，将会'新建底层数组'，此时再修改函数内切片，不会影响原切片. append不超过容量，函数内切片依然和原切片共享底层数组
        -> 容量的扩展规律按容量的 2 倍数扩充，例如 1、2、4、8、16...
        -> 使用append时,需使用预分配空间的方式声明定义切片变量,以避免append扩容'多次分配空间'

1.可以声明一个'未指定大小的数组'来定义切片. 一个切片在未初始化之前默认为nil，长度为0
    var slc []int //slc == nil, 未分配内存
    var slc = []int{} //slc != nil, 已分配内存
2.使用make()函数来初始化切片
    var slc []int = make([]int, 5, 10)// make(type, len, cap)
    //也可以简写为
    slc := make([]int, 5, 10)
3.定义一个切片，然后让切片去引用一个已经创建好的数组
    var arr [5]int = [...]int {1, 2, 3, 4, 5}
    var slc1 = arr[1:3] //不会发生内存分配操作
    var slc2 = arr[2:]
    slc3 := slc2[:]
    -> 修改任何arr, slc1, slc2共有元素，所有切片都改变

    slc := make([]int, 2, 4)
	slc1 := slc[:] //'浅拷贝'
	slc1 = append(arr1, 5) //如果添加元素后,总数量超过cap,新切片的更改不会影响底层数组
	slc1[1] = 8
	fmt.Printf("%v,  %v", slc, slc1)
    >>> [0 8],  [0 8 5] //新切片为底层数组添加元素，不影响原切片长度

slc := []int{1,2,3} //切片初始化, []表示是切片类型
var slice []string = []string{"zhangsan", "lisi", "wangwu"} //切片初始化
var slc []int = make([]int, 0) //cap(slc) >>> 0

len(slc) //获取切片长度
cap(slc) //测量切片最长可以达到多少(切片容量)。len(slc)结果并不总是等于cap
slc = append(slc, 2,3,4) //向已声明(不需初始化)切片添加元素
    -> nil slice可通多append来获得底层数组的扩容，调用mallocgc申请内存，从而添加元素
copy(slc1, slc2) //拷贝slc2的内容到slc1. '深拷贝',拷贝前需初始化申请空间

//这个函数使用任意数目的int作为参数
func sum(nums ...int){
	fmt.Println(nums,"")
	total := 0
	for _, num := range nums{ //for x := range nums x获取的是索引值
		total += num
	}
	fmt.Println(total)
}

//如果slice已经有了多个值，想把它们作为参数使用，要这样调用func(slic...)
nums := []int{1,2,3}
sum(nums...)

// 拼接切片a和b
a = append(a, b...)

//复制一个切片
b = append([]T(nil), a...)
b = append(a[:0:0], a...)

//从a中删除a[i:j]
a = append(a[:i], a[j:]...)

//删除切片a的第i个元素, 以被删除元素为分界点，将前后两个部分的内存重新连接起来
a = append(a[:i], a[i+1:]...)
-> 连续容器的元素删除无论是在任何语言中，都要将删除点前后的元素'移动到新的位置'。随着元素的增加，这个过程将会变得'极为耗时'。因此，当业务需要大量、频繁地从一个切片中删除元素时，如果对性能要求较高，就需要反思是否需要更换其他的容器（如'双链表'等能快速从删除点删除元素）

//为了避免内存泄露,删除切片a的第i个元素
copy(a[i:], a[i+1:])
a[len(a)-1] = nil // 或该类型的零值

//弹出切片最后一个元素，即出队列尾(pop back)
x, a = a[len(a) - 1], a[:len(a)-1]

//弹出切片第一个元素，即出队列头(pop)
x, a = a[0], a[1:]

//a[:i] 和a[i:]中间插入切片b
a = append(a[:i], append(b, a[i:]...)...)

//切片乱序(Go 1.10以上)
for i := len(a) - 1; i > 0; i-- {
    j := rand.Intn(i + 1) // 生成一个[0,i+1)区间内的随机数
    a[i], a[j] = a[j], a[i]
}

//有时候新生成的slice会修改，但是又'不想修改原切片或共享数组'。此时就需要'对原切片进行复制'
slice1 := []int{0, 1, 2, 3, 4}
slice2 := slice1[1:4]
slice3 := make([]int, len(slice2))
for i, e := range slice2 {
    slice3[i] = e
}
