-> GO语言基于C语言，可直接编译为可执行文件. 编译后Go代码的运行速度与C语言非常接近,编译速度非常快
-> 静态(强)类型语言
-> 没有万能的语言，换句话说一门语言不可能包含所有的特性；想囊括所有特性的语言一定是非常的复杂（C++); 保持简单性的方法就是：每种特性仅提供一种方法，减少重复、冗余，试想一下，如果汽车有多个刹车板，你会感觉更安全，更便利吗？'只提供一种方法做事情，把事情做到极致'，这就是go的原则，解放程序员，不要给他提供很多雷同的功能和语句，这不会使问题简单，只会加重程序员的心智负担
|编译 -> 词法分析(生成Token)->语法分析(生成抽象语法树AST)->类型检查->中间代码->机器码

|适用的场景(高并发)
    1.基础服务中应用比较多，比如docker，k8s，influxdb
    2.服务器编程，以前你如果使用C或者C++做的那些事情，用Go来做很合适，例如处理日志、数据打包、虚拟机处理、文件系统等. 存储系统，因为golang对所有IO类都有优化，如果'磁盘吞吐量比较大'，golang不失为一种选择
    3.分布式系统，数据库代理器等
    4.'网络编程'，这一块目前应用最广，包括Web应用、API应用、下载应用、内存数据库
    5.云平台，目前国外很多云平台在采用Go开发

|不适用的场景
    1. 强业务型，这些用PHP/JAVA更合适
    2. 依赖很多的第三方C库的模块，协程对全局变量，锁非常敏感

|Go成功的项目
    1.nsq：bitly开源的消息队列系统，性能非常高，目前他们每天处理数十亿条的消息
    2.docker:基于lxc的一个虚拟打包工具，能够实现PAAS平台的组建
    3.packer:用来生成不同平台的镜像文件，例如VM、vbox、AWS等，作者是vagrant的作者
    4.skynet：分布式调度框架
    5.Doozer：分布式同步工具，类似ZooKeeper
    6.Heka：mazila开源的日志处理系统
    7.cbfs：couchbase开源的分布式文件系统
    8.tsuru：开源的PAAS平台，和SAE实现的功能一模一样
    9.groupcache：memcahe作者写的用于Google下载系统的缓存系统
    10.god：类似redis的缓存系统，但是支持分布式和扩展性
    11.gor：网络流量抓包和重放工具

|开发中遇到的一些问题
    1.Go的import包不支持版本，有时候升级容易导致项目不可运行，所以需要自己控制相应的版本信息
    2.Go的goroutine一旦启动之后，不同的goroutine之间切换不是受程序控制，runtime调度的时候，需要严谨的逻辑，不然goroutine休眠，过一段时间逻辑结束了，突然冒出来又执行了 ，会导致逻辑出错等情况
    3.GC延迟有点大，我开发的日志系统伤过一次，同时并发很大的情况下，处理很大的日志，GC没有那么快，内存回收不给力，后来经过profile程序改进之后得到了改善
    4.pkg下面的图片处理库很多bug，还是使用成熟产品好，调用这些成熟库imagemagick的接口比较靠谱
