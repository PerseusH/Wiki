-> Go语言中允许函数返回多个参数，许多函数都会返回两样东西：正确答案和错误状态。这一点跟C++、Java使用异常的机制完全不同，可以说Go语言里面根本不存在异常这种概念，因此你也不可能看见异常链
-> Go 语言的错误处理思想及设计包含以下特征
    1.一个可能造成错误的函数，需要返回值中返回一个'错误接口（error）'。如果调用是成功的，错误接口将返回 nil，否则返回错误
    2.在函数调用后需要检查错误，如果发生错误，进行必要的错误处理

-> Go没有类似Java或.NET 中的异常处理机制，虽然可以使用 defer、panic、recover 模拟，但官方并不主张这样做。Go 语言的设计者认为其他语言的异常机制已被过度使用，'上层逻辑需要为函数发生的异常付出太多的资源'。如果使用者觉得错误处理很麻烦而忽略错误，程序将在不可预知的时刻崩溃
-> Go希望开发者将错误处理视为开发中必须实现的环节,正确处理每一个可能发生错误的函数.Go使用返回值返回错误的机制,也能'大幅降低编译器、运行时处理错误的复杂度',让开发者真正地掌握错误的处理

//net 包中的例子
func Dial(network, address string) (Conn, error) {
    var d Dialer
    return d.Dial(network, address)
}

//io 包中的例子
type Writer interface {
    Write(p []byte) (n int, err error)
}

|自定义错误
    1.errors包 var err = errors.New("this is an error")
        import "errors"
        var errDivisionByZero = errors.New("division by zero") //定义除数为0的错误
        func divide(dividend, divisor int) (int, error) {
            if divisor == 0 { //判断除数为0的情况并返回
                return 0, errDivisionByZero
            }
            return dividend / divisor, nil //正常计算，返回空错误
        }
    2.手动实现error接口 -> 使用 errors.New 定义的错误字符串的错误类型是无法提供丰富的错误信息的。那么，如果需要携带错误信息返回，就需要借助自定义结构体实现错误接口
        //系统定义的错误接口，所有符合 Error()string 格式的方法，都能实现该接口
        type error interface {
        Error() string //Error()返回错误的具体描述，使用者可通过这个字符串知道发生了什么错误
        }

        // 声明一个解析错误
        type ParseError struct {
            Filename string // 文件名
            Line     int    // 行号
        }
        // '实现error接口'，返回错误描述
        func (e *ParseError) Error() string {
            return fmt.Sprintf("%s:%d", e.Filename, e.Line)
        }
        // 创建一些解析错误
        func newParseError(filename string, line int) error {
            return &ParseError{filename, line}
        }
        func main() {
            var e error
            // 创建一个错误实例，包含文件名和行号
            e = newParseError("main.go", 1)
            // 通过error接口查看错误描述
            fmt.Println(e.Error())
            // 根据错误接口具体的类型，获取详细错误信息
            switch detail := e.(type) {
            case *ParseError: // 这是一个解析错误
                fmt.Printf("Filename: %s Line: %d\n", detail.Filename, detail.Line)
            default: // 其他类型的错误
                fmt.Println("other error")
            }
        }
    -> 如果想进一步知道错误的详细信息，可通过'类型断言'，将错误对象转为具体错误类型获取详细信息
        ？？？

|panic -> 用于错误处理。调用panic()时，立即抛出一个'任意类型'的错误信息, panic之前的'defer语句'执行，然后一层一层向上返回，直到整个'进程终止(宕机)'，并'打印函数调用栈'
    |recover -> 用于捕获panic抛出的信息。recover必须定义在panic之前的defer语句中
    func panic(v interface{}) //panic的系统声明，可处理任意类型参数
    func foo(){
        defer func (){
            if r := recover(); r != nil { //'程序不会宕机'
    			fmt.Printf("捕获到的错误：%s\n", r)
    		}
        }()
        panic("error test.....")
        fmt.Println("END")
    }
    -> 有panic也有recover捕获, 程序不会宕机. 执行完defer, 从宕机点退出当前函数后继续执行。panic和recover类似于的throw和catch，方便进行'多层嵌套的错误处理'.panic用于抛出异常，recover用于捕获异常。但并'不建议'在普通函数中经常性使用这种特性
    -> 如果想在捕获错误时设置当前函数的返回值，可以对返回值使用命名返回值方式直接进行设置

    //在运行依赖的必备资源缺失时'主动触发宕机'
    func MustCompile(str string) *Regexp {
        regexp, error := Compile(str)
        if error != nil {
            panic(`regexp: Compile(` + quote(str) + `): ` + error.Error())
        }
        return regexp
    }

-> 多处错误处理存在代码重复时是非常棘手的，例如
    err := firstCheckError()
    if err != nil {
        fmt.Println(err)
        exitProcess()
        return
    }
    err = secondCheckError()
    if err != nil {
        fmt.Println(err)
        exitProcess()
        return
    }
    fmt.Println("done")

    //使用 goto 语句来实现同样的逻辑
    err := firstCheckError()
    if err != nil {
        goto onExit
    }
    err = secondCheckError()
    if err != nil {
        goto onExit
    }
    fmt.Println("done")
    return
onExit:
    fmt.Println(err)
    exitProcess()
