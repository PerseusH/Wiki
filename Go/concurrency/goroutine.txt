-> Go 允许使用 go 语句开启一个新的运行期线程， 即 goroutine，以一个不同的、新创建的 goroutine 来执行一个函数。 同一个程序中的所有 goroutine '共享同一个地址空间'
-> 当一个协程在写map的时候，其他协程如果试图去读或者写这个map，程序会直接崩溃

|runtime.GOMAXPROCS(CPU数量) -> 使用多核。适合于'计算密集型'、并行度比较高的情景。如果是IO密集型，CPU之间的切换会带来性能的损失
    -> 默认情况下(即不配置最大处理器个数), go启动后会根据计算机的CPU数来创建线程. 如果有2个CPU, go程序有6个协程, 运行后创建了4个线程, 但只有2个线程为'工作线程'(即与CPU数一样)
    -> GOMAXPROCS 同时也是一个环境变量，在应用程序启动前设置环境变量也可以起到相同的作用
    |CPU数量可以有如下几种数值
        <1：不修改任何数值
        =1：单核心执行
        >1：多核并发执行
    runtime.NumCPU() //查询CPU数量
    runtime.GOMAXPROCS(runtime.NumCPU()) //Go 1.5 版本之前，'默认单核执行'。从 Go 1.5 版本开始，'默认执行这条语句'以便让代码'使用多核'，最大效率地利用计算资源

    |工作线程 -> 运行未组塞的goroutine的线程
    -> 如果配置了最大CPU使用数N(runtime.GOMAXPROCS(N)), 则无论创建多少协程, 工作线程数<=N
    -> go 运行后默认会开启4个线程(不全是工作线程)。go创建的线程数量与runtime.GOMAXPROCS(N) 有关, 会随协程数量增加动态增加线程(上限为配置的数量)
    -> 当某个goroutine被block后，scheduler会'创建一个新线程'给其他ready的goroutine
    -> 为了'最佳性能', 最大处理器使用数量应该为CPU的数量, 即runtime.GOMAXPROCS(runtime.NumCPU()), 超过这个值, 则随着协程的增加, 线程的数量也会大于CPU的数量, 这样反而在协程切换时会'需要CPU进行线程切换', 影响性能

|调度 -> goroutine 由Go程序'runtime调度和管理'
    -> Go 程序在启动时，runtime会默认为 main() 函数创建一个 goroutine
    -> goroutine属于抢占式任务处理,coroutine属于协作式任务处理.当前goroutine只有涉及到'锁操作和读写channel'才会触发线程切换. 和现有的多线程和多进程任务处理非常类似。应用程序对 CPU 的控制最终还需要'由操作系统管理???'，操作系统如果发现一个应用程序长时间大量地占用 CPU，那么用户有权终止这个任务
    -> Go运行的时候包涵一个'自己的调度器'，这个调度器使用一个称为一个M:N调度技术，m个goroutine到n个os线程（可以用GOMAXPROCS来控制n的数量），Go的调度器不是由硬件时钟来定期触发的，而是由特定的go语言结构来触发的，'不需要切换到内核'语境，所以goroutine的'调度开销远远小于线程'
    -> 'OS的线程'由OS'内核调度'，每隔几毫秒，一个'硬件时钟中断'发到CPU，CPU调用一个调度器内核函数。这个函数暂停当前正在运行的线程，把他的寄存器信息保存到内存中，查看线程列表并决定接下来运行哪一个线程，再从内存中恢复线程的注册表信息，最后继续执行选中的线程

    runtime.Gosched() // 显式地让出CPU时间给其他goroutine
    runtime.Goexit() //函数用于终止当前的goroutine，但defer函数将会继续被调用

package main
import (
        "fmt"
        "time"
)
func say(s string) {
        for i := 0; i < 5; i++ {
                time.Sleep(100 * time.Millisecond)
                fmt.Println(s)
        }
}
func main() {
        go say("。。。") //goroutine
        go say("！！！") //goroutine
        go say("world") //goroutine
        say("hello")
}

|闭包问题
    var wg sync.WaitGroup
    for i := 0; i < 5; i++ {
        wg.Add(1)
        go func() {//匿名goroutine
            fmt.Println(i)
            wg.Done()
        }()
    }
    wg.Wait()
    >>>
    5
    5
    5
    5
    5
    -> 启动一个goroutine的速度远小于循环执行的速度，所以即使是第一个goroutine刚起启动时，外层的循环也执行到了最后一步了。由于所有的goroutine共享i，而且这个i会在最后一个使用它的goroutine结束后被销毁，所以最后的输出结果都是最后一步的i==5
    |解决方案
    1.
        ...
        go func(i int) {
            fmt.Println(i)
            wg.Done()
        }(i)
        ...
    2.
        ...
        i := i //同名变量覆盖
        go func() {
            fmt.Println(i)
            wg.Done()
        }()
        ...
    3.
        ...
        ch := make(chan int, 1)
    	for i:=0; i<5; i++ {
    		go func(){
    			ch <- 1
    			fmt.Println(i)
    		}()
    		<- ch //阻塞直到上面的goroutine完成通道写操作
    	}
        ...
