go test -bench=".*" -test.benchmem -count=1 #性能压力测试，-count可以指定执行多少次
go test -bench=”.” or go test -test.bench=".*" #性能压力测试
    package pkg
    import "testing"
    //性能压力测试
    func BenchmarkValidate(b *testing.B) {
        b.StopTimer() //调用该函数停止压力测试的时间计数
        //做一些初始化的工作,例如读取文件数据,数据库连接之类的,
        //这样这些时间不影响我们测试函数本身的性能
        b.StartTimer() //重新开始时间
        //数字b.N会在运行中调整，以达到合适的时间消耗。方便计算出合理的数据（免得数据全部是0）
        for i:=0; i<b.N; i++ {
            Validate(...)
        }
    }
    // 测试并发效率
    func BenchmarkLoopsParallel(b *testing.B) {
        b.RunParallel(func(pb *testing.PB) {
            var test ForTest
            ptr := &test
            for pb.Next() {
                ptr.Loops()
            }
        }
    }
    1.文件名必须以_test.go结尾
    2.用例必须遵循BenchmarkXXX，其中XXX为任意字母数字的组合，但首字母不能为小写字母
    3.go test不会默认执行压力测试的函数，如果要执行压力测试需要带上参数-test.bench，语法:-test.bench="test_name_regex",例如go test -test.bench=".*"表示测试全部的压力测试函数
    4.在压力测试用例中,请记得在循环体内使用testing.B.N,以使测试可以正常的运行

go test [-v] #单元测试, -v为查看详细信息
    package pkg
    import "testing"
    //单元测试
    func TestValidate(t *testing.T) {
        retult := Validate(...)
        if result != false {
            t.Error("Failed!")
        } else {
            t.Log("第一个测试通过了")
        }
    }
    1.文件名必须是_test.go结尾的，这样在执行go test的时候才会执行到相应的代码
    2.必须import testing这个包
    3.测试用例函数必须是Test开头,参数是testing.T,格式为TestXXX，XXX首字母不能为小写字母
    4.函数中通过调用testing.T的Error, Errorf, FailNow, Fatal, FatalIf方法，说明测试不通过，调用Log方法用来记录测试的信息

testing.T
    判定失败接口
    Fail 失败继续
    FailNow 失败终止
    打印信息接口
    Log 数据流 （cout　类似）
    Logf format (printf 类似）
    SkipNow 跳过当前测试
    Skiped 检测是否跳过
    综合接口产生：
    Error / Errorf 报告出错继续 [ Log / Logf + Fail ]
    Fatel / Fatelf 报告出错终止 [ Log / Logf + FailNow ]
    Skip / Skipf 报告并跳过 [ Log / Logf + SkipNow ]

testing.B
    首先 ， testing.B 拥有testing.T 的全部接口。
    SetBytes( i uint64) 统计内存消耗
    SetParallelism(p int) 制定并行数目
    StartTimer / StopTimer / ResertTimer 操作计时器
    testing.PB
    Next() 接口。判断是否继续循环

|go test 参数解读
    -c : 编译go test成为可执行的二进制文件，但是不运行测试
    -i : 安装测试包依赖的package，但是不运行测试
    关于build flags，调用go help build，这些是编译运行过程中需要使用到的参数，一般设置为空
    关于packages，调用go help packages，这些是关于包的管理，一般设置为空
    关于flags for test binary，调用go help testflag，这些是go test过程中经常使用到的参数
    -test.v : 是否输出全部的单元测试用例（不管成功或者失败），默认没有加上，所以只输出失败的单元测试用例
    -test.run pattern: 只跑哪些单元测试用例
    -test.bench patten: 只跑那些性能测试用例
    -test.benchmem : 是否在性能测试的时候输出内存情况
    -test.benchtime t : 性能测试运行的时间，默认是1s
    -test.cpuprofile cpu.out : 是否输出cpu性能分析文件
    -test.memprofile mem.out : 是否输出内存性能分析文件
    -test.blockprofile block.out : 是否输出内部goroutine阻塞的性能分析文件
    -test.memprofilerate n : 内存性能分析的时候有一个分配了多少的时候才打点记录的问题。这个参数就是设置打点的内存分配间隔，也就是profile中一个sample代表的内存大小。默认是设置为512 * 1024的。如果你将它设置为1，则每分配一个内存块就会在profile中有个打点，那么生成的profile的sample就会非常多。如果你设置为0，那就是不做打点了
    你可以通过设置memprofilerate=1和GOGC=off来关闭内存回收，并且对每个内存块的分配进行观察。
    -test.blockprofilerate n: 基本同上，控制的是goroutine阻塞时候打点的纳秒数。默认不设置就相当于-test.blockprofilerate=1，每一纳秒都打点记录一下
    -test.parallel n : 性能测试的程序并行cpu数，默认等于GOMAXPROCS
    -test.timeout t : 如果测试用例运行时间超过t，则抛出panic
    -test.cpu 1,2,4 : 程序运行在哪些CPU上面，使用二进制的1所在位代表，和nginx的nginx_worker_cpu_affinity是一个道理
    -test.short : 将那些运行时间较长的测试用例运行时间缩短
