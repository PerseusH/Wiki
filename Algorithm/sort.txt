-> 假设待排序数组元素数为n
    1.若n较小(n<=50), 优先选用插入排序或选择排序
    2.若元素初始状态基本正序有序，优先选用插入排序，冒泡排序或随机的快速排序
    3.若n较大，优先选用时间复杂度为O(nlogn)的排序方法: 快速排序，堆排序或归并排序

|快速排序(Quick Sort) -> 数组元素'随机分布'时，平均时间最短，效率不稳定
    |最坏情况 -> 每次选取的枢纽都是最小/大值, 时间复杂度为O(N**2)
        |解决方案 -> 随机取枢纽, 三数取中
            |三数取中 -> 取l[l], l[(l + r) // 2], l[r]三者大小为中的. 取值时顺便排序
    |最好情况 -> 每次选取的枢纽都是中间值, 时间复杂度为O(NlgN)
    |平均时间复杂度 -> O(NlgN)
    -> 最优空间复杂度: O(lgN) 最差空间复杂度: O(N)
    -> 每次执行都会产生一个位置中间值支持下次递归调用，必须使用'栈'。所以空间复杂度就是栈的空间.当函数被递归调用时，变量空间创建于运行时栈上。上级调用的函数变量仍保留在栈上，但它们被新递归函数的变量所掩盖，因此是不能被访问的。递归结束时栈空间反向依次释放
    -> 快速排序是目前基于比较的内部排序中被认为是最好的方法
    |适用场景 -> 绝大多数普通排序

|堆排序(Heap Sort) -> '占用内存非常少'，不会出现快排的最坏情况，效率不稳定
    -> 使用堆结构(数组实现的二叉树)实现
    |堆属性 -> 最大(小)堆的父节点值大(小)于每一个子节点值。堆顶一定是最大(小)值, 叶节点不确定
    |平均时间复杂度 -> O(nlogk)
    |空间复杂度 -> O(k), '在海量数据下远小于快排'
    -> 堆排序'比较和交换次数'比快速排序多，所以'平均效率比快排低'，也就是常数因子比较大
    |适用场景 -> 海量数据取top k，优先级队列

-> STL的std::sort是先使用快速排序，如果发现明显效率退化则换选堆排序这种稳定排序
