\文件和目录
    cd /home #进入 '/ home' 目录'
    cd .. #返回上一级目录
    cd ../.. #返回上两级目录
    cd #进入个人的主目录
    cd ~user1 #进入个人的主目录
    cd - #返回上次所在的目录
    pwd #显示工作路径
    ls #查看目录中的文件
    ls -F #查看目录中的文件
    ls -l #显示文件和目录的详细资料(权限 用户 大小)
    ls -a #显示隐藏文件
    ls *[0-9]* #显示包含数字的文件名和目录名
    tree dir #显示文件和目录由根目录开始的树形结构(1)
    lstree #显示文件和目录由根目录开始的树形结构(2)
    mkdir dir1 #创建一个叫做 'dir1' 的目录'
    mkdir dir1 dir2 #同时创建两个目录
    mkdir -p /tmp/dir1/dir2 #创建一个目录树
    rm -f file1 #删除一个叫做 'file1' 的文件'
    rmdir dir1 #删除一个叫做 'dir1' 的目录'
    rm -rf dir1 #删除一个叫做 'dir1' 的目录并同时删除其内容
    rm -rf dir1 dir2 #同时删除两个目录及它们的内容
    mv dir1 new_dir #重命名/移动 一个目录
    cp file1 file2 #复制一个文件
    cp dir/* . #复制一个目录下的所有文件到当前工作目录
    cp -a /tmp/dir1 . #复制一个目录到当前工作目录
    cp -a dir1 dir2 #复制一个目录
    find dir -name [xxx.txt | dir_x] #从目录'dir'开始搜索文件或目录
    find . -maxdepth 1 -name *.jpg -print -exec convert "{}" -resize 80x60 "thumbs/{}" \; #batch resize files in the current directory and send them to a thumbnails directory (requires convert from Imagemagick)
    ln -s file1 lnk1 #创建一个指向文件或目录的软链接(快捷方式)
    ln file1 lnk1 #创建一个指向文件或目录的物理链接
    CMD > xxx.xx #xxx.xx不存在则生成文件,内容为CMD结果;文件存在则以CMD结果覆盖内容
    CMD >> xxx.xx #xxx.xx不存在则生成文件,内容为CMD结果;文件存在则新添CMD内容
    echo "xxx" >> README.md  #生成内容为"xxx"的文件README.md,文件存在则新添一行"xxx"
    echo xxx.txt #输出"xxx.txt"
    touch -t 0712250000 file1 #修改一个文件或目录的时间戳 - (YYMMDDhhmm)
    file file1 #outputs the mime type of the file as text
    iconv -l #列出已知的编码
    iconv -f fromEncoding -t toEncoding inputFile > outputFile #creates a new from the given input file by assuming it is encoded in fromEncoding and converting it to toEncoding.

\文件的权限 - 使用 "+" 设置权限,使用 "-" 用于取消
    -> u表示档案拥有者,g表示与档案拥有者属于同一个group,o表示其他以外的人,a表示这三者皆是
    -> r表示可读取,w表示可写入,x表示可执行,X表示只有当该档案是子目录或该档案已被设定过为可执行
    chmod abc file #其中a,b,c各为一个数字，分别表示User、Group、及Other的权限
    -> 此外chmod也可以用数字来表示权限如 chmod 777 file #令任何人对file都可读可写可执行
    -> 其中a,b,c各为一个数字,分别表示User、Group、及Other的权限
        -> r=4，w=2，x=1
        -> 若要rwx属性则4+2+1=7；
        -> 若要rw-属性则4+2=6；
        -> 若要r-x属性则4-1=3
    + -> 增加权限 - -> 取消权限 = -> 唯一设定权限
    -c -> 若该档案权限确实已经更改,才显示其更改动作
    -f -> 若该档案权限无法被更改也不要显示错误讯息
    -v -> 显示权限变更的详细资料
    -R -> 对当前目录的所有档案与子目录进行权限递归变更
    ls -lh #显示权限
    ls /tmp | pr -T5 -W$COLUMNS #将终端划分成5栏显示
    chmod ugo+rwx directory1 #设置目录的所有人(u)、群组(g)以及其他人(o)以读(r )、写(w)和执行(x)的权限
    chmod go-rwx directory1 #删除群组(g)与其他人(o)对目录的读写执行权限
    chown user1 file1 #改变一个文件的所有人属性
    chown -R user1 directory1 #改变一个目录的所有人属性并同时改变改目录下所有文件的属性
    chgrp group1 file1 #改变文件的群组
    chown user1:group1 file1 #改变一个文件的所有人和群组属性
    find / -perm -u+s #罗列一个系统中所有使用了SUID控制的文件
    chmod u+s /bin/file1 #设置一个二进制文件的 SUID 位 - 运行该文件的用户也被赋予和所有者同样的权限
    chmod u-s /bin/file1 #禁用一个二进制文件的 SUID位
    chmod g+s /home/public #设置一个目录的SGID 位 - 类似SUID,不过这是针对目录的
    chmod g-s /home/public #禁用一个目录的 SGID 位
    chmod o+t /home/public #设置一个文件的 STIKY 位 - 只允许合法所有人删除文件
    chmod o-t /home/public #禁用一个目录的 STIKY 位
    chmod o+x /home/public #设置一个目录为其他人都可执行

\文件搜索
    find / -user user1 #搜索属于用户 'user1' 的文件和目录
    find / -name \*o\*|grep '^\./\.' #在结果中搜索以./.开头的文件或目录,正则表达式需加引号
    find / -name \*o\*|grep git #在结果中搜索含git的文件或目录
    find / -name \*o\*|grep -v git #在结果中排除含git的文件或目录
    grep -n xxx <file> #在文件中查找包含xxx的行,-n为打印行号
    grep -n '[0-9]' <file> #在文件中查找包含数字的行
    find /home/user -name \*.bin #在目录'/home/user'中搜索带有'.bin'结尾的文件,*.需转义
    find /usr/bin -type f -atime +100 #搜索在过去100天内未被使用过的执行文件
    find /usr/bin -type f -mtime -10 #搜索在10天内被创建或者修改过的文件
    find / -name \*.rpm -exec chmod 755 '{}' \; #搜索以 '.rpm' 结尾的文件并定义其权限
    find / -xdev -name \*.rpm #搜索以 '.rpm' 结尾的文件,忽略光驱、捷盘等可移动设备
    locate \*.ps 寻找以 '.ps' #结尾的文件 - 先运行 'updatedb' 命令
    whereis halt #显示一个二进制文件、源码或man的位置
    which halt #显示一个二进制文件或可执行文件的完整路径

\文本处理
    cat file1 #从第一个字节开始正向查看文件的内容
    tac file1 #从最后一行开始反向查看一个文件的内容
    more file1 #查看一个长文件的内容
    less file1 #类似于 'more' 命令,但是它允许在文件中和正向操作一样的反向操作
    head -2 file1 #查看一个文件的前两行
    tail -2 file1 #查看一个文件的最后两行
    tail -f /var/log/messages #实时查看被添加到一个文件中的内容
    cat file1 file2 ... | command <> file1_in.txt_or_file1_out.txt #general syntax for text manipulation using PIPE, STDIN and STDOUT
    cat file1 | command( sed, grep, awk, grep, etc...) > result.txt #合并一个文件的详细说明文本,并将简介写入一个新文件中
    cat file1 | command( sed, grep, awk, grep, etc...) >> result.txt #合并一个文件的详细说明文本,并将简介写入一个已有的文件中
    grep Aug /var/log/messages #在文件 '/var/log/messages'中查找关键词"Aug"
    grep ^Aug /var/log/messages #在文件 '/var/log/messages'中查找以"Aug"开始的词汇
    grep [0-9] /var/log/messages #选择 '/var/log/messages' 文件中所有包含数字的行
    grep Aug -R /var/log/* #在目录 '/var/log' 及随后的目录中搜索字符串"Aug"
    sed 's/stringa1/stringa2/g' example.txt #将example.txt文件中的 "string1" 替换成 "string2"
    sed '/^$/d' example.txt #从example#.txt文件中删除所有空白行
    sed '/ *#/d; /^$/d' example.txt #从example.txt文件中删除所有注释和空白行
    echo 'esempio' | tr '[:lower:]' '[:upper:]' #合并上下单元格内容
    sed -e '1d' result.txt #从文件example.txt 中排除第一行
    sed -n '/stringa1/p' #查看只包含词汇 "string1"的行
    sed -e 's/ *$//' example.txt #删除每一行最后的空白字符
    sed -e 's/stringa1//g' example.txt #从文档中只删除词汇 "string1" 并保留剩余全部
    sed -n '1,5p;5q' example.txt #查看从第一行到第5行内容
    sed -n '5p;5q' example.txt #查看第5行
    sed -e 's/00*/0/g' example.txt #用单个零替换多个零
    cat -n file1 #标示文件的行数
    cat example.txt | awk 'NR%2==1' #删除example.txt文件中的所有偶数行
    echo a b c | awk '{print $1}' #查看一行第一栏
    echo a b c | awk '{print $1,$3}' #查看一行的第一和第三栏
    paste file1 file2 #合并两个文件或两栏的内容
    paste -d '+' file1 file2 #合并两个文件或两栏的内容,中间用"+"区分
    sort file1 file2 #排序两个文件的内容
    sort file1 file2 | uniq #取出两个文件的并集(重复的行只保留一份)
    sort file1 file2 | uniq -u #删除交集,留下其他的行
    sort file1 file2 | uniq -d #取出两个文件的交集(只留下同时存在于两个文件中的文件)
    comm -1 file1 file2 #比较两个文件的内容只删除 'file1' 所包含的内容
    comm -2 file1 file2 #比较两个文件的内容只删除 'file2' 所包含的内容
    comm -3 file1 file2 #比较两个文件的内容只删除两个文件共有的部分

\文件的特殊属性 - 使用 "+" 设置权限,使用 "-" 用于取消
    chattr +a file1 #只允许以追加方式读写文件
    chattr +c file1 #允许这个文件能被内核自动压缩/解压
    chattr +d file1 #在进行文件系统备份时,dump程序将忽略这个文件
    chattr +i file1 #设置成不可变的文件,不能被删除、修改、重命名或者链接
    chattr +s file1 #允许一个文件被安全地删除
    chattr +S file1 #一旦应用程序对这个文件执行了写操作,使系统立刻把修改的结果写到磁盘
    chattr +u file1 #若文件被删除,系统会允许你在以后恢复这个被删除的文件
    lsattr #显示特殊的属性

\打包和压缩文件
    bunzip2 file1.bz2 #解压一个叫做 'file1.bz2'的文件
    bzip2 file1 #压缩一个叫做 'file1' 的文件
    gunzip file1.gz #解压一个叫做 'file1.gz'的文件
    gzip file1 #压缩一个叫做 'file1'的文件
    gzip -9 file1 #最大程度压缩
    rar a file1.rar test_file #创建一个叫做 'file1.rar' 的包
    rar a file1.rar file1 file2 dir1 #同时压缩 'file1', 'file2' 以及目录 'dir1'
    rar x file1.rar #解压rar包
    unrar x file1.rar #解压rar包
    tar -cvf archive.tar file1 #创建一个非压缩的 tarball
    tar -cvf archive.tar file1 file2 dir1 #创建一个包含了 'file1', 'file2' 以及 'dir1'的档案文件
    tar -tf archive.tar #显示一个包中的内容
    tar -xvf archive.tar #释放一个包
    tar -xvf archive.tar -C /tmp #将压缩包释放到 /tmp目录下
    tar -cvfj archive.tar.bz2 dir1 #创建一个bzip2格式的压缩包
    tar -xvfj archive.tar.bz2 #解压一个bzip2格式的压缩包
    tar -cvfz archive.tar.gz dir1 #创建一个gzip格式的压缩包
    tar -xvfz archive.tar.gz #解压一个gzip格式的压缩包
    zip file1.zip file1 #创建一个zip格式的压缩包
    zip -r file1.zip file1 file2 dir1 #将几个文件和目录同时压缩成一个zip格式的压缩包
    unzip file1.zip #解压一个zip格式压缩包

\文本文件转换
    NotePad++/Ultra Edit/Sublime Text2提供了转换功能 #﻿编辑器实现转换
    用Linux命令实现转换:
    sed -e 's/.$//' mydos.txt > myunix.txt #Windows到Unix
    sed -e 's/$/\r/' myunix.txt > mydos.txt #Unix到Windows
    dos2unix filedos.txt fileunix.txt #将一个文本文件的格式从MSDOS转换成UNIX
    unix2dos fileunix.txt filedos.txt #将一个文本文件的格式从UNIX转换成MSDOS
    recode ..HTML < page.txt > page.html #将一个文本文件转换成html
    recode -l | more #显示所有允许的转换格式

\挂载一个文件系统
    mount /dev/hda2 /mnt/hda2 #挂载一个叫做hda2的盘 - 确定目录 '/ mnt/hda2' 已经存在
    umount /dev/hda2 #卸载一个叫做hda2的盘 - 先从挂载点 '/ mnt/hda2' 退出
    fuser -km /mnt/hda2 #当设备繁忙时强制卸载
    umount -n /mnt/hda2 #运行卸载操作而不写入/etc/mtab文件当文件为只读或磁盘写满时非常有用
    mount /dev/fd0 /mnt/floppy #挂载一个软盘
    mount /dev/cdrom /mnt/cdrom #挂载一个cdrom或dvdrom#
    mount /dev/hdc /mnt/cdrecorder #挂载一个cdrw或dvdrom
    mount /dev/hdb /mnt/cdrecorder #挂载一个cdrw或dvdrom
    mount -o loop file.iso /mnt/cdrom #挂载一个文件或ISO镜像文件
    mount -t vfat /dev/hda5 /mnt/hda5 #挂载一个Windows FAT32文件系统
    mount /dev/sda1 /mnt/usbdisk #挂载一个usb 捷盘或闪存设备
    mount -t smbfs -o username=user,password=pass //WinClient/share /mnt/share #挂载一个windows网络共享

\磁盘空间
    df -h #显示已经挂载的分区列表
    ls -lSr |more #以尺寸大小排列文件和目录
    du -sh dir1 #估算目录 'dir1' 已经使用的磁盘空间'
    du -sk * | sort -rn #以容量大小为依据依次显示文件和目录的大小
    rpm -q -a --qf '%10{SIZE}t%{NAME}n' | sort -k1,1n #以大小为依据依次显示已安装的rpm包所使用的空间 (fedora, redhat类系统)
    dpkg-query -W -f='${Installed-Size;10}t${Package}n' | sort -k1,1n #以大小为依据显示已安装的deb包所使用的空间 (ubuntu, debian类系统)

\文件系统分析
    badblocks -v /dev/hda1 #检查磁盘hda1上的坏磁块
    fsck /dev/hda1 #修复/检查hda1磁盘上linux文件系统的完整性
    fsck.ext2 /dev/hda1 #修复/检查hda1磁盘上ext2文件系统的完整性
    e2fsck /dev/hda1 #修复/检查hda1磁盘上ext2文件系统的完整性
    e2fsck -j /dev/hda1 #修复/检查hda1磁盘上ext3文件系统的完整性
    fsck.ext3 /dev/hda1 #修复/检查hda1磁盘上ext3文件系统的完整性
    fsck.vfat /dev/hda1 #修复/检查hda1磁盘上fat文件系统的完整性
    fsck.msdos /dev/hda1 #修复/检查hda1磁盘上dos文件系统的完整性
    dosfsck /dev/hda1 #修复/检查hda1磁盘上dos文件系统的完整性

-初始化一个文件系统
    mkfs /dev/hda1 #在hda1分区创建一个文件系统
    mke2fs /dev/hda1 #在hda1分区创建一个linux ext2的文件系统
    mke2fs -j /dev/hda1 #在hda1分区创建一个linux ext3(日志型)的文件系统
    mkfs -t vfat 32 -F /dev/hda1 #创建一个 FAT32 文件系统
    fdformat -n /dev/fd0 #格式化一个软盘
    mkswap /dev/hda3 #创建一个swap文件系统

-SWAP文件系统
    mkswap /dev/hda3 #创建一个swap文件系统
    swapon /dev/hda3 #启用一个新的swap文件系统
    swapon /dev/hda2 /dev/hdb3 #启用两个swap分区

-备份
    dump -0aj -f /tmp/home0.bak /home #制作一个 '/home' 目录的完整备份
    dump -1aj -f /tmp/home0.bak /home #制作一个 '/home' 目录的交互式备份
    restore -if /tmp/home0.bak #还原一个交互式备份
    rsync -rogpav --delete /home /tmp #同步两边的目录
    rsync -rogpav -e ssh --delete /home ip_address:/tmp #通过SSH通道rsync
    rsync -az -e ssh --delete ip_addr:/home/public /home/local #通过ssh和压缩将一个远程目录同步到本地目录
    rsync -az -e ssh --delete /home/local ip_addr:/home/public #通过ssh和压缩将本地目录同步到远程目录
    dd bs=1M if=/dev/hda | gzip | ssh user@ip_addr 'dd of=hda.gz' #通过ssh在远程主机上执行一次备份本地磁盘的操作
    dd if=/dev/sda of=/tmp/file1 #备份磁盘内容到一个文件
    tar -Puf backup.tar /home/user 执行一次对 '/home/user' #目录的交互式备份操作
    ( cd /tmp/local/ && tar c . ) | ssh -C user@ip_addr 'cd /home/share/ && tar x -p' #通过ssh在远程目录中复制一个目录内容
    ( tar c /home ) | ssh -C user@ip_addr 'cd /home/backup-home && tar x -p' #通过ssh在远程目录中复制一个本地目录
    tar cf - . | (cd /tmp/backup ; tar xf - ) #本地将一个目录复制到另一个地方,保留原有权限及链接
    find /home/user1 -name '*.txt' | xargs cp -av --target-directory=/home/backup/ --parents #从一个目录查找并复制所有以 '.txt' 结尾的文件到另一个目录
    find /var/log -name '*.log' | tar cv --files-from=- | bzip2 > log.tar.bz2 #查找所有以 '.log' 结尾的文件并做成一个bzip包
    dd if=/dev/hda of=/dev/fd0 bs=512 count=1 #做一个将 MBR (Master Boot Record)内容复制到软盘的动作
    dd if=/dev/fd0 of=/dev/hda bs=512 count=1 #从已经保存到软盘的备份中恢复MBR内容
