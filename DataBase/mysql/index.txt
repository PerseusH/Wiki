-> 索引是对数据库表中一列或多列的值进行排序的一种结构. 索引的本质是'排序'

|高选择性索引列 -> 尽量使用高选择性的过引来过滤数据。高选择性指Cardinality/T越接近1，选择性越高，Cardinality指表中索引列不重复值(行)的总数。PK和唯一索引具有最高选择性1。推荐可选性达到20%以上
    -> 数据值少(区分度小)的列不应该添加索引. 若只有两种值且平均分布，加了索引反而降低速度
    -> SQL查询条件中有多个索引可用时, MySQL优先使用高选择性索引(PK和唯一索引)
    -> 选择性高的索引可以让MySQL在查找时'过滤掉更多的行'
    -> 唯一值总数少于255的列不要创建独立索引

|内存缓冲池 -> 首先将从'磁盘预读到的页'FIX到缓冲池。下次访问时，若目标页在缓冲池中，则命中；若不在缓冲池中，读取磁盘上的页。修改操作，首先修改缓冲池中的页，然后再以一定的频率刷新到磁盘
    mysql> show variables like ‘innodb_buffer_pool_size’; #查看缓冲池大小
    -> MySQL使用双向链表来作为缓冲池，每个数据节点称为block
　　 -> 缓冲池中缓存的数据页类型有:索引页、数据页、undo页、插入缓冲insert buffer、自适应哈希索引adaptive hash index、InnoDB存储的锁信息lock info、数据字典信息data dictionary等

|表扫描(Table Scan) -> 从磁盘中依次读出所有的数据块，一行一行进行匹配, 直到找到需要的数据。时间复杂度是O(n). 如果所有的数据占用了100个块, 就需要读出所有100个块的数据, 会产生大量的'磁盘IO'

|为什么使用B+Tree -> B+Tree'出度可设置(出度越大高度越小)',定位到数据需要访问的磁盘块越少,且'有序数据存储位置紧凑(结合磁盘预读)',查询速度快; 红黑树出度为2,高度大,且数据存储不紧凑,不能使用磁盘预读
-> BTree的叶结点是稠密索引(DenseIndex, 每个索引值指向一行数据),非叶结点是稀疏索引(Sparse Index, 每个索引值指向一组连续范围数据).索引的IO性能和索引树的高度密切相关.'索引树越高,磁盘IO越多'
-> Dense Index指向的数据可以是无序的，但是Sparse Index的数据必须是有序的
-> 索引扫描(IndexScan)实际上是对DenseIndex层进行遍历
-> 聚簇索引的Dense层是行数据; 辅助索引的Dense层是索引列+主键/指针
-> 标准的B+Tree的每个节点有K个键值和K+1个指针，指向K+1个子节点. InnoDB的B+Tree'每个结点有K个键值和K个指针'. 这样做的好处在于，键值和指针一一对应。可以将一个<Key,Pointer>对看作一条记录。这样就可以'用数据块的存储格式来存储索引块'。因为不需要为索引块定义单独的存储格式，就降低了实现的难度
-> B+树的查找运算有两种：从最小关键字起'顺序查找'，从根结点开始进行'随机查找'

-> 索引在'创建或删除'时，MySQL会先创建一个新的'临时表'，然后把数据导入临时表，删除原表，再把临时表更名为原表名称。但是在InnoDB Plugin版本开始，支持快速创建索引。其原理是先在InnoDB上加一个s锁，在创建过程中不需要建表，所以速度会很快。创建过程中由于加了s锁，所以只能进行读操作，不能写操作

|聚簇(cluster)索引 -> 对磁盘上实际数据重新组织以按指定的一个或多个列的值排序
    -> 实际上是在同一个b+tree中保存了'索引和数据行'.叶节点包含索引和相关行数据,非叶节点只包含了索引. 行数据的物理顺序按照聚簇索引顺序紧凑相邻, 随着数据增删，物理上不再连续. '聚簇索引是InnoDB的特性, MyISAM没有'
    -> 聚簇表示数据行和键值紧凑地存储在一起,因为无法同时把数据行存放在两个不同的地方,所以'一个表只能有一个聚簇索引'
    -> 建聚簇索引需要至少相当该表120%的附加空间，以存放该表的副本和索引中间页
    -> 每个InnoDB表都有一个聚簇索引, 数据按聚簇索引有序存储。InnoDB的数据文件本身要按主键聚集('默认以主键为聚簇索引')，所以InnoDB要求表必须有主键（'MyISAM可以没有主键'）. 如果未定义主键，InnoDB取'第一个唯一非空索引'作为主键。如果没有这样的列，InnoDB就自己产生一个六字节的隐藏ID作为聚簇索引. 因此MyISAM虽然在一般情况下查询性能高,但'InnoDB的主键查询'性能是非常高的
    -> 聚簇索引就是一级索引，其他非聚簇索引都是'二级索引'，又叫辅助索引（secondary indexes）
    -> InnoDB表数据文件本身就是按B+Tree组织的一个索引文件; MyISAM索引文件和数据文件是分离的
    -> InnoDB表的'辅助索引的叶结点'data域保存的都是'主键值'; MyISAM索引叶节点data域保存的是数据物理地址指针
    -> InnoDB辅助索引使用主键值作为”指针” 而不是使用物理地址作为指针的好处是，减少了当出现行移动或者数据页分裂时辅助索引的维护工作，使用主键值当作指针会让辅助索引占用更多的空间，换来的好处是InnoDB在移动行时无须更新辅助索引中的这个”指针”。也就是说行的位置（实现中通过16K的Page来定位）会随着数据库里数据的修改而发生变化(前面的B+树节点分裂以及Page的分裂)，使用聚簇索引就可以保证不管这个主键B+树的节点如何变化，辅助索引树都不受影响(每次都是通过关联的主键值到主键树查找数据)
    -> Page是整个InnoDB存储的最基本构件，也是InnoDB磁盘管理的最小单位，与数据库相关的所有内容都存储在这种Page结构里。Page分为几种类型，常见的页类型有数据页（B-tree Node）Undo页（Undo Log Page）系统页（System Page） 事务数据页（Transaction System Page）等。单个Page的大小是16K（编译宏UNIV_PAGE_SIZE控制），每个Page使用一个32位的int值来唯一标识，这也正好对应InnoDB最大64TB的存储容量（16Kib * 2^32 = 64Tib
    - INSERT 在Clustered B+Tree上插入数据. 在所有其他Secondary B+Tree上插入主键
    - DELETE 在Clustered B+Tree上删除数据. 在所有其他Secondary B+Tree上删除主键
    - UPDATE非键列 在Clustered B+Tree上更新数据
    - UPDATE主键列 在Clustered B+Tree删除原有的记录(只是标记为DELETED,并不真正删除). 在Clustered B+Tree插入新的记录. 在每一个Secondary B+Tree上删除原有的数据. 在每一个Secondary B+Tree上插入原有的数据
    - UPDATE辅助索引的键值 在Clustered B+Tree上更新数据. 在每一个Secondary B+Tree上删除原有的主键. 在每一个Secondary B+Tree上插入原有的主键
    |优点
    　　 1.可以把相关数据保存在一起(行数据的物理位置按照聚簇索引顺序相邻). 当访问同一数据页不同行记录('范围查询')时，由于已经把页加载到了Buffer中，后续访问会在内存中完成.'不会产生多次磁盘IO'
    　　 2.数据访问更快.索引和数据保存在同一个btree中,因此获取数据很快
    　　 3.使用覆盖索引扫描的查询可以直接使用页节点中的主键值
        4.因为聚簇索引是'按照物理顺序放置'的, '排序很快'.非聚簇索引需要额外消耗资源来排序
        5.聚簇索引找到包含第一个值的行后，便可以确保包含后续索引值的行在'物理相邻','适合范围查找'
    |缺点
    　　 1.如果'数据全部放在内存'中,则访问的顺序就没有那么重要了,聚簇索引也没有什么优势了
    　　 2.插入速度严重依赖于插入顺序,按照主键的顺序插入是速度最快的方式.但如果不是按照主键顺序加载数据,在加载完成后最好使用'optimize table'重新组织一下.'聚簇索引的插入速度比非聚簇索引慢很多'
    　　 3.更新聚簇索引列的代价很高,InnoDB会强制'将被更新的行移动到新的位置(重新按主键排序)'
    　　 4.基于聚簇索引的表在'插入新行',或者'主键被更新'导致需要移动行的时候,可能面临'页分裂'的问题,当行的主键值要求必须将这一行插入到某个已满的页中时,存储引擎会将该页分裂成两个页面来容纳该行,这就是一次页分裂操作,页分裂会导致表占用更多的磁盘空间. 更新很多时，尽量少建索引
    　　 5.聚簇索引可能导致'全表扫描',尤其是行比较稀疏,或者由于页分裂导致数据存储不连续的时候
    　　 6.InnoDB的所有二级索引都引用主键, 过长的主键字段会令'辅助索引变得过大, 占用过多空间', 所以'主键列应该尽量的短小'
    　　 7.'二级索引需要两次索引查找'，首先检索二级索引获得主键值，然后用主键到主键索引树中获取数据
        8.用非单调的字段作为主键在InnoDB中不是个好主意，因为InnoDB数据文件本身是一颗B+Tree，非单调的主键会造成在'插入新记录'时数据文件为了维持B+Tree的特性而频繁的分裂调整，十分低效，应尽量在InnoDB上用一个'与业务无关的INT型自增字段做主键'(与业务相关的字段可能被更改)
            -> InnoDB使用聚集索引，数据记录存储于主索引B+Tree的叶子节点上.这就要求同一叶子节点内(大小为一个内存页或磁盘页)各条'数据按主键顺序存放',因此每当有新记录插入,MySQL会根据主键将其插入适当位置,如果页面大小达到装载因子(InnoDB默认为15/16),则开辟一个新页
            -> 使用自增主键每次新增记录会'顺序添加'到当前索引节点的后续位置, 一页写满会自动开辟新页. 这样就会形成一个'紧凑的索引结构'，近似顺序填满. 由于每次插入时也不需要移动已有数据，因此效率很高
            -> 如果使用'非自增主键'（如UUID,身份证号或学号等），由于'每次插入主键的值近似于随机'，因此每次新纪录都要被插到现有索引页中间的某个位置, 行数据物理位置稀疏存储, 每查询一行可能都要产生一次IO. 此时MySQL不得不为了将新记录插到合适位置而移动数据，甚至目标页面可能已经被回写到磁盘上而从缓存中清掉，此时又要从磁盘上读回来，这增加了很多开销，同时频繁的移动、分页操作造成了大量的碎片，得到了不够紧凑的索引结构，后续不得不通过OPTIMIZE TABLE来重建表并优化填充页面
|非聚簇索引 -> 非聚簇索引的叶节点仍然是索引节点,只不过有一个'指针'指向对应的'数据块'.逻辑顺序与磁盘的物理存储顺序不同(行数据的物理顺序并不紧凑相邻, 最坏情形'每查询一行数据都会产生一次磁盘IO')
    -> 非聚簇索引都是'二级索引'(辅助索引)，像'复合索引、前缀索引、唯一索引'
    -> myisam不存在聚簇索引. '主键也是非聚簇索引'
    -> 辅助索引允许键值重复

|前缀索引 -> MySQL 前缀索引能有效减小索引文件的大小,提高索引的速度.但是前缀索引也有坏处->MySQL不能在ORDER BY或GROUP BY中使用前缀索引,也不能把它们用作覆盖索引(Covering Index).当前缀的选择性越接近全列选择性的时候,索引效果越好
    -> '为了减小索引体积，提高索引的扫描速度',使用前缀索引占用的空间会大大减少,并且索引的选择性也不会降低很多.对BLOB,TEXT或者非常长的VARCHAR列必须使用前缀索引,MySQL不允许索引它们的全部长度
    mysql> ALTER TABLE city ADD KEY(cityname(7)); #取城市名的前7位作为前缀索引

|函数索引 -> 用'虚拟列'(VirtualColumns Mysql 5.7)实现, 解决查询条件中函数列不能使用索引的问题
        CREATE TABLE `test` (
        `id` int(11) NOT NULL AUTO_INCREMENT,
        `SimpleDate` date DEFAULT NULL,
        `SimpleDate_dayofweek` tinyint(4) GENERATED ALWAYS AS (dayofweek(SimpleDate)) VIRTUAL, #对真实列进行函数运算建立虚拟列
        KEY `SimpleDate_dayofweek` (`SimpleDate_dayofweek`), #在虚拟列上建立索引
        PRIMARY KEY (`id`),
        ) ENGINE=InnoDB
    -> 5.7以前的解决方案是新建一个进行了函数运算后的真实列建立索引, 会占用大量空间
    -> 虚拟列不会持久化到磁盘上，但虚拟列的元数据信息会存在于相关系统表(数据字典)中，对虚拟列的添加或者删除只会涉及这些系统表，不会导致数据表的重建，所以效率很高.不能建立虚拟列和真实列的联合索引

-> '多个单列索引'在多条件and查询时只会生效第一个索引; 多条件or查询时全部生效

|联合索引(以下均假设在数据库表的字段a,b,c上建立联合索引(a,b,c))
    -> 联合索引比多个单列索引更有优势(多个索引树更占磁盘空间,更新速度慢).尽量扩展索引,不要新建索引
    alter table tbl add index idx_a_b_c(a, b, c)
    |最左前缀原理 -> 假设索引为idx_a_b_c, 那么查询条件中含有a|ab|abc的sql才能用到索引(abc顺序不限), ac组合只能用到a列索引. 适用于where, Order by, group by, 表字段关联查询
        -> Where a=1,where a>=12 and a<15,where a=1 and b<5 ,where a=1 and b=7 and c>=40'可以用到abc联合索引'；where b=10,where c=221,where b>=12 and c=2'无法用到abc联合索引'
        -> 最左前缀的范围列(>, <, >=, <=, between...and)可以用到索引，但是范围列'后面的列无法用到索引'。同时'索引最多用于一个范围列'，如果查询条件中有两个范围列则无法全用到索引
        -> 联合索引中的字段应满足'过滤数据从多到少'的顺序,也就是说差异最大的字段应该是第一个字段
        -> '创建联合索引'的时候一定要注意索引字段顺序，'常用的字段放在最前面'
    -> 联合索引(或复合主键)必须使用到该索引中的第一个字段作为条件时才能保证系统使用该索引.SQL语句的条件尽量与索引的内容一致,使SQL语句尽量以整个索引为条件,尽量避免以索引的一部分(特别是不包含最左索引列)作为查询条件. 条件顺序和索引顺序不一致没关系
    -> 理论上索引对顺序是敏感的，但是查询优化器会'自动调整'where子句的条件顺序以使用适合的索引
    -> 当需要查询的数据库字段全部在索引中体现时,数据库可以直接查询索引得到查询信息无须对整个表进行扫描(这就是所谓的key-only),能大大的提高查询效率

|B-Tree/B+Tree -> 大多数场景都会有范围查询、排序、分组等特征，用B+树索引就可以了. 大多数MySQL索引(PRIMARY KEY、UNIQUE、INDEX和FULLTEXT)在B树中存储

|Hash索引 -> 只能用于'等值查询(=, IN, <=>)', 此时效率明显高于B+Tree. 不能进行排序,模糊匹配,范围查询,多列联合索引的最左匹配. 在有大量重复键值情况下,哈希索引的效率也是极低的，因为存在哈希碰撞问题
    -> 在HEAP表中，如果存储的数据重复度很低（也就是说基数很大），对该列数据以等值查询为主，没有范围查询、没有排序的时候，特别适合采用哈希索引

|R-Tree
    |空间数据类型 -> 几何坐标, 地理位置信息等多维数据
    -> 在最新发布的MySQL 5.7.4实验室版本中，InnoDB存储引擎新增了对于几何数据空间索引的支持
    -> 在此之前，InnoDB将几何数据存储为BLOB（二进制大对象）数据，在空间数据上只能创建前缀索引，当涉及空间搜索时非常低效，尤其是在涉及复杂的几何数据时。在大多数情况下，获得结果的唯一方式是扫描表
    -> 新版本MySQL中，InnoDB支持空间索引，通过R树来实现，使得空间搜索变得高效
    -> InnoDB空间索引也支持MyISAM引擎现有的空间索引的语法，此外，InnoDB空间索引支持完整的事务特性以及隔离级别
    -> 目前，InnoDB空间索引只支持两个维度的数据，MySQL开发团队表示有计划支持多维

|FullText索引 -> 全文索引(也称全文检索)是目前搜索引擎使用的一种关键技术。它能够利用'分词技术'等多种算法智能分析出文本文字中关键字词的频率及重要性，然后按照一定的算法规则筛选出我们想要的搜索结果
    -> 返回的行是按与所查找内容的相关度由高到低的顺序排列的。这个相关度的值由WHERE语句中的MATCH (…) AGAINST (…)计算所得，是一个非负浮点数。该值越大表明相应的行与所查找的内容越相关，0值表明不相关。该值基于行中的单词数、行中不重复的单词数、文本集合中总单词数以及含特定单词的行数计算得出
    CREATE TABLE article (
     id INT UNSIGNED AUTO_INCREMENT NOT NULL PRIMARY KEY,
     title VARCHAR(200),
     content TEXT,
     FULLTEXT (title, content)
     )ENGINE=MyISAM DEFAULT CHARSET=utf8;
    |语法 -> SELECT ... WHERE MATCH(col1,col2,…) AGAINST (expr[search_modifier])。其中MATCH中的内容为已建立FULLTEXT索引并要从中查找数据的列，AGAINST中的expr为要查找的文本内容
    -> 必须使用特有的语法才能使用全文索引进行查询。例如，我们想要在article表的title和content列中全文检索指定的查询字符串，可以如下编写SQL语句：
        SELECT * FROM article WHERE MATCH(title, content) AGAINST ('查询字符串');

    -> 将索引列拼成一个字符串,建立索引.索引是双B-Tree结构,索引词是一棵树,文档指针一棵树.类似聚簇索引和二级索引,聚簇索引相当于文档指针树,二级指针相当于关键词索引树.关键词索引有些规则,太常用的词、太短的词、在停用词表中收录的词都不予生成索引
    -> 搜索必须在类型为fulltext的索引列上，match中指定的列必须在fulltext中指定过
    -> 仅能应用在表引擎为MyIsam类型的表中（MySQL 5.6.4以后Innodb也支持了）
    -> 仅能再char、varchar、text类型的列上面创建全文索引
    -> 像普通索引一样，可以在定义表时指定，也可以在创建表后添加或者修改
    -> 对于一个大数量级记录插入，向没有索引的表中插入数据后创建索引比向有索引的数据表中插入的过程要快很多
    -> 搜索字符串必须是一个常量字符串，不能是表的列名
    -> 在搜索记录的选择性超过50%的时候，认为没有匹配（只在自然搜索中限制）

    -> 全文索引返回的结果集是按照'相关度'排列的,这一点区别like、正则表达式;like、正则表达式按顺序返回,没有相关度的概念
    -> LIKE搜索的耗时随着记录数的增加而线性增长，但对于10万行记录以下的表（这里共100000*50个单词）搜索时间基本上能保持在1秒以内，所以like搜索的性能也不是特别差。由不同词汇量生成的文本对LIKE搜索的性能影响不大，不同词汇量对应的搜索时间基本上在一个很小的时间范围内变化
    -> FULLTEXT搜索耗时也随表中记录数的增长而线性增加。对于10万行记录以下的表（这里共100000*50个单词）搜索时间基本上能保持在0.01秒以内。由不同词汇量生成的随机文本对FULLTEXT搜索性能有相对来说比较显著的影响。每行记录中含同样的单词数，这样，较大的词汇量倾向于生成冗余度更低的文本，相应的搜索耗时倾向于更少。这可能与FULLTEXT索引建立单词索引的机制有关，较大的词汇量倾向于生成范围广但相对较浅的索引，因而能快速确定文本是否匹配
    -> 与LIKE搜索相比，FULLTEXT全文搜索的性能要强很多，对于'10万行记录'的表，搜索时间都在0.02秒以下。因此可以将基于FULLTEXT索引的文本搜索部署于网站项目中的文本搜索功能中。但是，正如上述提到的，无论是LIKE搜索还是FULLTEXT搜索，其性能都会随着记录数的增长而下降，因此，若网站项目中的文本搜索数据库记录数庞大的一定规模后，可能需要考虑使用MySQL数据库全文搜索以外的文本搜索解决方案了

|CBO -> 查询优化器
|索引失效原因
    1.没有查询条件,索引失效,提示不使用索引,在查询条件上没有使用引导列,或者查询条件没有建立索引
    2.where a=1 and b like '%xxx' #通配符%出现在开头不能使用索引; 可使用like 'xxx%'
        -> 如需查询'%xxx%', 使用'全文索引'
    3.扫描行数太多，大于总数的15%时使得索引失效(导致CBO计算走索引花费大于走全表,选择表扫描）
        -> 可使用分段查询
    4.如果查询条件中含有'函数, 类型转换'，则不会为这列使用索引, 需建立'函数索引'
    6.对小表查询
    7.用or分割开的条件，or前条件有索引，or后的列没有索引，那么涉及的索引不会被用到
    8.统计信息(高选择性)不真实,需要重新搜集统计信息.CBO会根据索引的高选择性值决定是否使用这个索引
    9.字符串列内容为数值时where条件里不加引号(Mysql隐式转换类型)，索引失效(数值类型加引号则不会隐式转换)
        错误的例子：select * from test where tu_mdn=123;
        正确的例子：select * from test where tu_mdn='123';
    10.负向查询(not, not in, not like, <>, != ,!>,!<)
    11.对索引列进行运算(+，-，*，/，!等)
        错误的例子：select * from test where id-1=9;
        正确的例子：select * from test where id=10;
    14.表没分析
    15.当变量采用的是times变量，而表的字段采用的是date变量时.或相反情况
    16.基于cost成本分析(走全表成本会更小)：查询小表,或者返回值大概在10%以上
    17.有时都考虑到了 但就是不走索引,drop了重建试试
    18.B-tree索引 is null不会走,is not null会走,位图索引 is null,is not null 都会走
    19.联合索引 is not null 只要在建立的索引列（不分先后）都会走,
    is null时 必须要和建立索引第一列一起使用,当建立索引第一位置条件是is null 时,
    其他建立索引的列可以是is null（但必须在所有列 都满足is null的时候）,
    或者=一个值；当建立索引的第一位置是=一个值时,其他索引列可以是任何情况（包括is null =一个值）,
    以上两种情况索引都会走。其他情况不会走
