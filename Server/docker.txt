- Docker是使用时下很火的Golang语言进行开发的，技术核心是Linux内核的Cgroup，Namespace和AUFS类的Union FS等技术，这些技术都是Linux内核中早已存在很多年的技术，所以严格来说并不是一个完全创新的技术，Docker通过这些底层的Linux技术，对**Linux进程**进行封装隔离，而被隔离的进程也被称为**容器**，完全独立于宿主机的进程
- **镜像（Image）容器（Container）仓库（Repository）**是Docker中最核心的概念

### Client



### Server



## Kubernetes

- 在Kubernetes中，服务间的负载均衡实现是通过iptables中对于每条实例规则的概率匹配来实现的。而在服务网格Istio中的实现，则是靠一个sidecar边车容器来“劫持”两个服务容器之间的流量，流量一旦被“劫持”后，那就可以做负载均衡、熔断限流、灰度发布、安全检测、遥测上报等一系列的操作了

### 容器解决了开发与生产环境的问题

- 开发环境与生产环境折射的是开发人员与运维人员之间的矛盾，也许我们常常会听到开发人员对运维人员说的这样一句话：“在我的电脑运行没问题，怎么到了你那里就出问题了，肯定是你的问题”，而运维人员是认为是开发人员的问题
- 开发人员需要在本机安装各种各样的测试环境，因此开发的项目需要软件越多，依赖越多，安装的环境也就越复杂。

- 同样的，运维人员需要为开发人员开发的项目提供生产环境，而运维人员除了应对软件之间的依赖，还需要考虑安装软件与硬件之间的兼容性问题

- 就是这样，所以我们经常看到开发与运维相互甩锅，怎么解决这个问题呢？
- 容器就是一个不错的解决方案，容器能成为开发与运维之间沟通的语言，因为容器就像一个集装箱一样，提供了软件运行的最小化环境，将应用与其需要的环境一起打包成为镜像，便可以在开发与运维之间沟通与传输