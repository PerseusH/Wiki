|RESTful -> C/S模式，建立在分布式体系上，通过互联网通信，具有高延时、高并发等特点
    |URI(Uniform Resource Identifier) -> 统一资源定位符. 资源就是网络上的一个实体，或者说是网上的一个具体信息, 可以是一份文本、图片、歌曲、视频、服务。要获取资源，访问URI就可以，因此URI就成了每个资源的地址或独一无二的识别符。上网就是与网上一系列的资源互动，调用其URI

    |特性
        1.一切网络对象都被抽象成一种资源
        2.客户端和服务器之间, 传递这种资源的某种表现层
        3.客户端通过四个HTTP动词, 对服务器端资源进行操作, 实现"表现层状态转化"
        4.http操作无状态, 减少上下文依赖, 降低耦合
        5.目的是简化http操作, 网站即软件, 防止跨站攻击
    
    |API设计
        -> API与用户的通信协议，总是使用HTTPs协议
        -> 应该尽量将API部署在专用域名之下, https://api.example.com; 如果确定API很简单，不会有进一步扩展，可以考虑放在主域名下, https://example.org/api/
    
        |版本号 -> 可能会增加维护成本
            -> 推荐的做法是两种一起用，对外的API地址一直保持不变，做一个转发器，然后内部api还是按照版本写成不同的地址和controller，方便维护和管理
            1.将API版本号放入URL
                https://api.xxx.com/v1.1/ | https://api.xxx.com/users?version=2.0
                -> 好处就是可以写成多个controller 方便管理和维护，坏处就是第一前端麻烦，api升级之后还需要更改地址，第二代码存在冗余，在功能可能重叠的情况下会写出重复代码
            2.将版本号放在HTTP头中(Header: Accept)
                Request ==>
                GET /app/123 HTTP/1.1
                Accept: application/vnd.xxx[.version].param[+json] #template
                Accept: application/vnd.demo.app-v2+json #demo
                Accept: application/json; version=2.0 #simplified
                <== Response
                HTTP/1.1 200 OK
                Content-Type: application/vnd.demo.app-v2+json
                -> 对于客户端来说调用更方便，所有api接口的地址都不改动，只需要更改自身版本号即可访问新的接口，坏处就是做兼容性有一点麻烦
    
        |路径(Endpoint) -> 表示API的具体网址
            -> 在RESTful架构中，每个网址代表一种资源，所以网址中不能有动词，只能有'{名词}'，而且所用的名词往往与'{数据库的表名}'对应。一般来说，数据库中的表都是同种记录的'{集合}'，所以API中的名词也应该使用'{复数}'. 单个对象用ID表示
                https://api.example.com/v1/zoos
                https://api.example.com/v1/animals
            -> 如果记录很多,服务器不可能都将它们返回给用户。API应该提供'{参数}',过滤返回结果
                ?limit=10：指定返回记录的数量
                ?offset=10：指定返回记录的开始位置
                ?page=2&per_page=100：指定第几页，以及每页的记录数
                ?sortby=name&order=asc：指定返回结果按照哪个属性排序，以及排序顺序
                ?type_id=1：指定筛选条件
            -> 服务器向用户返回状态码和提示信息
                -> 如果状态码是4xx，就应该向用户返回出错信息 {error: "Error Msg!"}
            -> 针对不同操作，服务器向用户返回的结果应该符合以下规范
                GET /collection -> 返回资源对象的列表（数组）
                GET /collection/resource -> 返回单个资源对象
                POST /collection -> 返回新生成的资源对象
                PUT /collection/resource -> 返回完整的资源对象
                PATCH /collection/resource -> 返回完整的资源对象
                DELETE /collection/resource -> 返回一个空文档
            -> API的身份认证应该使用OAuth 2.0框架
    
            |Data Parse
                -> JSON在80%的情况下(轻量级)都够用了, 剩下的20%情况下(重量级)需要用XML
                -> 服务器返回的数据格式,应该尽量使用JSON,避免使用XML. 某些场合不得不使用XML
                -> XML适合展现(XML+XSL->HTML,Android Layout,Ajax),JSON适合数据传输解析
                -> '{YAML对人类最友好}'
                -> '{XML对数据的描述性好}', 解码难度高(需考虑子节点和父节点)
                -> '{JSON数据结构简单}', 冗余字节少, 数据包比XML小
                    '{编码难度低, 适合网络传输, 占用带宽小}'
                -> '{JSON与多个编程语言的交互更方便, 无缝对接, 便于解析和读取}'
                -> XML只有文字, 没有数字格式; JSON有明确的number格式, 在locale上也安全
                -> JSON的true/false/null也能容易统一至一般编程语言的对应语义
    
                |JSON底层原理 -> 遍历字符串中的字符，最终根据格式规定的特殊字符，比如{}、[]、：等进行区分，{}号表示字典，[]号表示数组，：号是字典的键和值的分水岭，最终仍是将JSON转化为'{字典}'，只不过字典中的值可能是“字典、数组或者字符串而已”
    
                |XML底层原理 -> DOM解析和SAX解析
                    |DOM解析 -> 将内容解析为DOM树.解析时需处理整个文档,对内存和性能的要求高
                    |SAX解析 -> 解析时触发一系列事件.发现给定tag时,激活回调方法,告诉该方法指定标签已找到.对内存的要求较低，因为他让开发人员自己来决定所要处理的tag，特别是当开发人员只需要处理文档中所包含部分数据时
    
                |YAML(音 /yeml/)的设计目标,就是方便人类读写, 是一种通用的数据串行化格式
                    1.大小写敏感
                    2.使用缩进表示层级关系
                    3.缩进时不允许使用Tab键，只允许使用空格。
                    4.缩进的空格数目不重要，只要相同层级的元素左侧对齐即可
    
            |Hypermedia -> 返回结果中提供转向其他API方法的链接，使用户不查文档也知道下一步应该做什么
                比如，当用户向api.example.com的根目录发出请求，会得到这样一个文档
                {"link": {
                  "rel":   "collection https://www.example.com/zoos",
                  "href":  "https://api.example.com/zoos", #API的路径
                  "title": "List of zoos", #API的标题
                  "type":  "application/vnd.yourformat+json" #返回类型
                }}
                上面代码表示，文档中有一个link属性，用户读取这个属性知道下一步该调用什么API。rel表示这个API与当前网址的关系(collection关系,并给出该collection的网址)
    
                Hypermedia API的设计被称为HATEOAS。Github的API就是这种设计，访问api.github.com会得到一个所有可用API的网址列表
                {#如果想获取当前用户的信息，应该去访问api.github.com/user
                  "current_user_url": "https://api.github.com/user",
                  "authorizations_url": "https://api.github.com/authorizations",
                  // ...
                }
                -> 然后就得到了下面结果
                {#服务器给出了提示信息，以及文档的网址
                  "message": "Requires authentication",
                  "documentation_url": "https://developer.github.com/v3"
                }