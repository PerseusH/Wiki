- 一个字节的**无符号整数**取值范围为0至255(2^8-1)
- 原码中有两个0:00,10，补码中只有一个0:00，由于计算机可表示的数值总数没有变，**负0(10)被让给了补码负数**，使得可表示的最小负数加一(-(2^(n-1)-1+1)=>-2^(n-1)=>1000...0)
- 在32位和64位机器中，因为**补码**存储，int占32位，取值范围为-2147483648～2147483647（-2^31～2^31-1）
  - **-2147483648 = 10000000 00000000 00000000 00000000**
  - -128+127=>1000 0000 + 0111 1111=>1111 1111=>-1，-128的补码**完美适用于减法**

## 位运算

- n >> 31 => 0 #小于或等于2^31-1的非负数右移 31 (或大于31)位为一定为 `0`（**符号位**）
- -n >> 31 => -1 #大于或等于-2^31的负数右移 31 (或大于31)位为一定为 `-1`（**符号位**），也就是 `0xffff`
- 因为 `-1` 的二进制表示是所有位都是 `1`, 即0b1111_1111_1111_......_1111_1111_1111(32个1)
  - 因此，`-1` 与任何数进行**与**运算其**值不变**，-1 & n => n

|Sort -> QuickSort, HeapSort
|KMP
|Hash
|LRU
|最短路径
|DataStructure -> Array, Link, Queue, Stack, BinaryTree, Heap，图